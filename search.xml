<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elastic-job-lite issues 整理（四）</title>
      <link href="/2019/12/20/elastic-job/component-vc/"/>
      <url>/2019/12/20/elastic-job/component-vc/</url>
      
        <content type="html"><![CDATA[<h1 id="issues-类型"><a href="#issues-类型" class="headerlink" title="issues 类型"></a>issues 类型</h1><p>组件版本冲突。<a id="more"></a></p><h2 id="相关issue"><a href="#相关issue" class="headerlink" title="相关issue"></a>相关issue</h2><p><a href="https://github.com/elasticjob/elastic-job-lite/issues/698" target="_blank" rel="noopener">#698</a> <a href="https://github.com/elasticjob/elastic-job-lite/issues/590" target="_blank" rel="noopener">#590</a> <a href="https://github.com/elasticjob/elastic-job-lite/issues/475" target="_blank" rel="noopener">#475</a></p><p>目前存在版本冲的组件主要是guava和curator</p><h2 id="1-curator-framework-curator-client-curator-recipes"><a href="#1-curator-framework-curator-client-curator-recipes" class="headerlink" title="1. curator-framework/curator-client/curator-recipes"></a>1. curator-framework/curator-client/curator-recipes</h2><h3 id="1-1-zookeeper-版本"><a href="#1-1-zookeeper-版本" class="headerlink" title="1.1 zookeeper 版本"></a>1.1 zookeeper 版本</h3><p>Elastic-job-lite目前使用版本：3.4.6</p><p>版本图</p><p><img src="https://note.youdao.com/yws/api/personal/file/21A781D9FA1F4A05BDC277D2B84808CA?method=download&shareKey=d64ea06ed5877e7b916f9031d02a32c8" alt="image"></p><p>比较常用的版本为3.4.X和3.5.X，但是3.5.X有多个版本为beta版。</p><h3 id="1-2-curator版本"><a href="#1-2-curator版本" class="headerlink" title="1.2 curator版本"></a>1.2 curator版本</h3><p>Elastic-job-lite目前使用版本：2.10.0</p><p>版本图</p><p><img src="https://note.youdao.com/yws/api/personal/file/D2F900ADE2284CD7824433352A78736A?method=download&shareKey=1ec55f1297d852edb98f8506a314b3df" alt="image"></p><h4 id="1-2-1-zookeeper-for-curator"><a href="#1-2-1-zookeeper-for-curator" class="headerlink" title="1.2.1 zookeeper for curator"></a>1.2.1 zookeeper for curator</h4><blockquote><p><em>Curator 2.x.x - compatible with both ZooKeeper 3.4.x and ZooKeeper 3.5.x</em></p></blockquote><blockquote><p><em>Curator 3.x.x - compatible only with ZooKeeper 3.5.x and includes support for new features such as dynamic reconfiguration, etc</em></p></blockquote><blockquote><p><strong>Curator 4.x.x - has a hard dependency on ZooKeeper 3.5.x and  supports ZooKeeper 3.4.x ensembles in a soft-compatibility mode. To use this mode you must exclude ZooKeeper when adding Curator to your dependency management tool.</strong></p></blockquote><p>以上内容摘自curator官网以及相关资料。虽然curator 2.x 和 curator 4.x均能支持zk 3.4.x 以及 zk 3.5.x，但是建议选择curator 2.x版本，原因：</p><ul><li><ol><li>Elastic-job-lite对于curator的依赖度不高，仅使用了少量的功能，新特性高级特性没怎么使用，后续还有去掉curator的考虑，所以不建议跨度过大的升级版本。</li></ol></li><li><ol start="2"><li>Curator 4.x 对 zk 3.5.x 有硬依赖，zk 3.5.X有多个版本为beta版。且从目社区的issue来看，使用zk 3.4.x 并没有反馈太多的问题。</li></ol></li><li><ol start="3"><li>Elastic-job-lite目前使用的curator版本为2.10.0，curator在2.x版本中升级，出现兼容性问题的几率更小。</li></ol></li></ul><h4 id="1-2-2-guava-for-curator"><a href="#1-2-2-guava-for-curator" class="headerlink" title="1.2.2 guava for curator"></a>1.2.2 guava for curator</h4><p>curator 2.10.0 - 2.13.0版本中，使用guava的版本的都是 16.0.1</p><p>官方也考虑到curator 中 guava 版本冲突的问题，所以从 2.12.0版本开始，curator就采用了maven-shade-plugin，将guava 集成到了curator的jar包中。</p><p>官方说明：<a href="https://cwiki.apache.org/confluence/display/CURATOR/TN13" target="_blank" rel="noopener">Guava usage in Curator</a></p><p><strong>apache-curator-2.13.0.pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>apache-curator-guava-shader<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>false<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>com.google<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>org.apache.curator.shaded.com.google<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.google.common.base.Function<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.google.common.base.Predicate<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.google.common.reflect.TypeToken<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.groupId&#125;:$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>com.google.guava:guava<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Elastic-job要解决curator和guava版本冲突的问题，curator版本至少为2.12.0，否则无处理curator对于guava的依赖问题。</p><h2 id="2-guava"><a href="#2-guava" class="headerlink" title="2. guava"></a>2. guava</h2><h3 id="2-1-guava-版本"><a href="#2-1-guava-版本" class="headerlink" title="2.1 guava 版本"></a>2.1 guava 版本</h3><p>Elastic-job-lite目前使用版本：16.0.1</p><p>虽然eastic-job-lite的om中定义了guava的本为18.0</p><p><strong>elastic-job-lite.pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>18.0<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是在elastic-job-lite-core中没有引用dependencyManagement中声明的guava，而是沿用了curator依赖的guava，所以最终使用的guava版本为16.0.1</p><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><h3 id="3-1-modules情况"><a href="#3-1-modules情况" class="headerlink" title="3.1 modules情况"></a>3.1 modules情况</h3><p>elastic-job-lite中，我们需要解决组件版本冲突的module为：</p><p>elastic-job-lite-core 和  elastic-job-lite-spring </p><p>elastic-job-lite-lifecycle为console所需组件，elastic-job-lite-console为web console，独立运行，不会有组件冲突问题。</p><ul><li><p>elastic-job-lite-core ：需要考虑curator以及guava的冲突</p></li><li><p>elastic-job-lite-spring ：需要考虑及guava的冲突</p></li></ul><h3 id="3-2-maven-shade-plugin"><a href="#3-2-maven-shade-plugin" class="headerlink" title="3.2 maven-shade-plugin"></a>3.2 maven-shade-plugin</h3><p><a href="http://maven.apache.org/plugins/maven-shade-plugin/" target="_blank" rel="noopener">maven-shade-plugin</a>是一个maven打包插件，可以将一个artifact以及其依赖打包成uber-jar，并且能对某些依赖重命名。</p><blockquote><p>This plugin provides the capability to package the artifact in an uber-jar, including its dependencies and to shade - i.e. rename - the packages of some of the dependencies.</p></blockquote><p><em>PS: 在很多编程语言中会把super叫做uber （因为suber可能是关键字）， 这是上世纪80年代开始流行的，比如管superman叫uberman。所以uber-jar从字面上理解就是super-jar，这样的jar不但包含自己代码中的class ，也会包含一些第三方依赖的jar，也就是把自身的代码和其依赖的jar全打包在一个jar里面了，所以就很形象的称其为super-jar 。</em></p><p>目前解决jar包版本冲突比较通用的方式就是使用maven-shade-plugin。</p><h3 id="3-3-调整思路"><a href="#3-3-调整思路" class="headerlink" title="==3.3 调整思路=="></a>==3.3 调整思路==</h3><p><strong>在elastic-job-lite中，新增两个modules：</strong></p><ul><li><p><strong>elastic-job-lite-core-shade</strong> ：elastic-job-lite-core的shade module，仅依赖elastic-job-lite-core及相关dependency，控制dependencydency的传递性，将elastic-job-lite-core和存在冲突的dependency包打包成uber-jar</p></li><li><p><strong>elastic-job-lite-spring-shade</strong> ：elastic-job-lite-spring的shade module，仅依赖elastic-job-lite-spring及相关dependency，控制dependencydency的传递性，将elastic-job-lite-spring和存在冲突的dependency包打包成uber-jar</p></li></ul><p><strong>注意</strong>：不在elastic-job-lite-core和将elastic-job-lite-spring上直接调整的原因：</p><ul><li><ol><li>新增比修改的影响更小，保留原有module不变，不会对引用原有module的项目带来影响</li></ol></li><li><ol start="2"><li>解决组件冲突，除了将所需的dependency打包到uber-jar中外，还需要控制dependency的传递性，直接在原module上改的话，改造量会较大，容易出现问题。如果在新的module上调整的话，会比较方便。</li></ol></li><li><ol start="3"><li>直接修改的话，elastic-job-lite编译会报错，因为elastic-job-lite-core会使用maven-shade-plugin的relocation的功能，导致对于guava的import会被rename，而elastic-job-lite-core中又定义了一些抽象类和接口，部分抽象类及接口的返回类型又定义了guava的对象，所以elastic-job-lite-spring在编译时，会报错。</li></ol></li></ul><p><strong>elastic-job-lite-core-shade.pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>elastic-job-guava-shader<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>false<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>io.elasticjob:elastic-job-lite-core<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.curator:curator-framework<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.curator:curator-client<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.curator:curator-recipes<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>com.google.guava:guava<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>corg.apache.curator:curator-framework<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>org.apache.curator:curator-client<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>org.apache.curator:curator-recipes<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>com.google.guava:guava<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>io.elasticjob.lite.shaded.org.apache.curator<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>com.google<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>io.elasticjob.lite.shaded.com.google<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.google.gson.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>elastic-job-lite-spring-shade.pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>false<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>io.elasticjob:elastic-job-lite-spring<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span>&gt;</span>com.google.guava:guava<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>com.google.guava:guava<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>com.google<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>io.elasticjob.lite.shaded.com.google<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>总结一下上述涉及改造内容：</p><ol><li><p>升级curator版本为2.13.0（2.x系列版本最新版，且官方已经通过maven-shade-plugin解决了guava冲突问题）</p></li><li><p>升级zk版本为3.4.8（curator 2.13.0默认的zk版本为3.4.8）</p></li><li><p>去掉elastic-job-lie中dependencyManagement定义的guava，直接使用curator 2.13.0所依赖的guava 16.0.1</p></li><li><p>增加elastic-job-lite-core-shade以及elastic-job-lite-spring-shademodule（提供uber-jar，并收敛依赖）</p></li></ol><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><ol><li><p>基本功能</p></li><li><p>分片功能</p></li><li><p>失效转移</p></li><li><p>zk版本切换</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> elastic-job-lite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> elastic-job-lite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elastic-job-lite issues 整理（三）</title>
      <link href="/2019/12/04/elastic-job/resource-clean/"/>
      <url>/2019/12/04/elastic-job/resource-clean/</url>
      
        <content type="html"><![CDATA[<h1 id="issues-类型"><a href="#issues-类型" class="headerlink" title="issues 类型"></a>issues 类型</h1><p>资源释放，线程及内存回收问题。<a id="more"></a></p><h2 id="1-ReconcileService"><a href="#1-ReconcileService" class="headerlink" title="1. ReconcileService"></a>1. ReconcileService</h2><p>作业关闭时(通过console终止作业)，ReconcileService并没有正确停止，导致进程无法结束。</p><p>社区中，有动态生成job的使用场景，封装参数配置，调用<code>JobScheduler.init()</code>生成多个作业。作业执行完成后，调用<code>SchedulerFacade.shutdownInstance()</code>终止作业调度，并释放相关资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止作业调度.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leaderService.isLeader()) &#123;</span><br><span class="line">        leaderService.removeLeader();</span><br><span class="line">    &#125;</span><br><span class="line">    monitorService.close();</span><br><span class="line">    <span class="keyword">if</span> (reconcileService.isRunning()) &#123;</span><br><span class="line">        reconcileService.stopAsync(); <span class="comment">//终止reconcileService服务</span></span><br><span class="line">    &#125;</span><br><span class="line">    JobRegistry.getInstance().shutdown(jobName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前版本中通过console终止作业调度的话，无法正常停止<code>reconcileService</code>。所以在频繁的动态创建job的场景中，会因为<code>reconcileService</code>资源无法释放而导致内存泄露。</p><h3 id="1-1-分析"><a href="#1-1-分析" class="headerlink" title="1.1 分析"></a>1.1 分析</h3><h4 id="JobScheduler"><a href="#JobScheduler" class="headerlink" title="JobScheduler"></a>JobScheduler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">JobScheduler</span><span class="params">(<span class="keyword">final</span> CoordinatorRegistryCenter regCenter, <span class="keyword">final</span> LiteJobConfiguration liteJobConfig, <span class="keyword">final</span> JobEventBus jobEventBus, <span class="keyword">final</span> ElasticJobListener... elasticJobListeners)</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    schedulerFacade = <span class="keyword">new</span> SchedulerFacade(regCenter, liteJobConfig.getJobName(), elasticJobListenerList);</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化作业.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    schedulerFacade.registerStartUpInfo(!liteJobConfigFromRegCenter.isDisabled());</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SchedulerFacade"><a href="#SchedulerFacade" class="headerlink" title="SchedulerFacade"></a>SchedulerFacade</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SchedulerFacade</span><span class="params">(<span class="keyword">final</span> CoordinatorRegistryCenter regCenter, <span class="keyword">final</span> String jobName, <span class="keyword">final</span> List&lt;ElasticJobListener&gt; elasticJobListeners)</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line"></span><br><span class="line">    listenerManager = <span class="keyword">new</span> ListenerManager(regCenter, jobName, elasticJobListeners, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册作业启动信息.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> enabled 作业是否启用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStartUpInfo</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!reconcileService.isRunning()) &#123;</span><br><span class="line">        reconcileService.startAsync();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止作业调度.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (reconcileService.isRunning()) &#123;</span><br><span class="line">        reconcileService.stopAsync();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ListenerManager"><a href="#ListenerManager" class="headerlink" title="ListenerManager"></a>ListenerManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ListenerManager</span><span class="params">(<span class="keyword">final</span> CoordinatorRegistryCenter regCenter, <span class="keyword">final</span> String jobName, <span class="keyword">final</span> List&lt;ElasticJobListener&gt; elasticJobListeners)</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    shutdownListenerManager = <span class="keyword">new</span> ShutdownListenerManager(regCenter, jobName);</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ShutdownListenerManager"><a href="#ShutdownListenerManager" class="headerlink" title="ShutdownListenerManager"></a>ShutdownListenerManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShutdownListenerManager</span><span class="params">(<span class="keyword">final</span> CoordinatorRegistryCenter regCenter, <span class="keyword">final</span> String jobName)</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    schedulerFacade = <span class="keyword">new</span> SchedulerFacade(regCenter, jobName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstanceShutdownStatusJobListener</span> <span class="keyword">extends</span> <span class="title">AbstractJobListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">final</span> Type eventType, <span class="keyword">final</span> String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!JobRegistry.getInstance().isShutdown(jobName) &amp;&amp; !JobRegistry.getInstance().getJobScheduleController(jobName).isPaused()</span><br><span class="line">                &amp;&amp; isRemoveInstance(path, eventType) &amp;&amp; !isReconnectedRegistryCenter()) &#123;</span><br><span class="line">            schedulerFacade.shutdownInstance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>ShutdownListenerManager</code>的构造函数中，新创建了一个<code>SchedulerFacade</code>实例，通过console触发终止作业操作时，新创建的<code>SchedulerFacade</code>实例无法终止实际运行的<code>reconcileService</code>，因为<code>reconcileService</code>实例也是新创建的，其<code>state</code>始终是==NEW==。</p><h3 id="1-2-改造"><a href="#1-2-改造" class="headerlink" title="1.2 改造"></a>1.2 改造</h3><h4 id="1-2-1-消除SchedulerFacade实例的多次创建"><a href="#1-2-1-消除SchedulerFacade实例的多次创建" class="headerlink" title="1.2.1 消除SchedulerFacade实例的多次创建"></a>1.2.1 消除SchedulerFacade实例的多次创建</h4><ul><li><p><strong>ShutdownListenerManager</strong> 的初始化过程中不要创建新的<code>SchedulerFacade</code>实例，<code>SchedulerFacade</code>的引用通过新增的<code>setSchedulerFacade</code>方法来设置。</p></li><li><p><strong>ListenerManager</strong> 的<code>startAllListeners</code>方法中，在<code>shutdownListenerManager.start();</code>执行前，增加<code>ShutdownListenerManager.setSchedulerFacade</code>方法的调用。</p></li><li><p><strong>SchedulerFacade</strong> 通过<code>registerStartUpInfo</code>方法，将<code>SchedulerFacade</code>的引用向下传递。</p></li></ul><h4 id="1-2-2-全局化的ReconcileServiceManager"><a href="#1-2-2-全局化的ReconcileServiceManager" class="headerlink" title="1.2.2. 全局化的ReconcileServiceManager"></a>1.2.2. 全局化的ReconcileServiceManager</h4><ul><li><p>构建一个单例模式的<code>ReconcileServiceManager</code></p></li><li><p><code>ReconcileServiceManager</code>中创建一个存储结构（比如Map），注册作业时，将registryCneter和jobName作为key，将<code>reconcileService</code>作为value，对应存储到存储结构中。</p></li><li><p>终止作业时，从<code>ReconcileServiceManager</code>中停止并删除registryCneter和jobName作为key对应的<code>reconcileService</code></p></li></ul><hr><h2 id="2-RegistryCenterConnectionStateListener"><a href="#2-RegistryCenterConnectionStateListener" class="headerlink" title="2. RegistryCenterConnectionStateListener"></a>2. RegistryCenterConnectionStateListener</h2><p>作业终止时，RegistryCenterConnectionStateListener资源没有释放。</p><p>社区中，有动态生成job的使用场景，封装参数配置，调用<code>JobScheduler.init()</code>生成多个作业。作业执行完成后，调用<code>SchedulerFacade.shutdownInstance()</code>终止作业调度，并释放相关资源。</p><p>目前版本终止作业调度的话，<code>RegistryCenterConnectionStateListener</code>相关的资源并没有注销释放。所以在频繁的动态创建job的场景中，会存在内存泄露的隐患。</p><h3 id="2-1-分析"><a href="#2-1-分析" class="headerlink" title="2.1 分析"></a>2.1 分析</h3><h4 id="SchedulerFacade-1"><a href="#SchedulerFacade-1" class="headerlink" title="SchedulerFacade"></a>SchedulerFacade</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SchedulerFacade</span><span class="params">(<span class="keyword">final</span> CoordinatorRegistryCenter regCenter, <span class="keyword">final</span> String jobName, <span class="keyword">final</span> List&lt;ElasticJobListener&gt; elasticJobListeners)</span> </span>&#123;</span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line"></span><br><span class="line">    listenerManager = <span class="keyword">new</span> ListenerManager(regCenter, jobName, elasticJobListeners, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册作业启动信息.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> enabled 作业是否启用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStartUpInfo</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    listenerManager.startAllListeners();</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止作业调度.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leaderService.isLeader()) &#123;</span><br><span class="line">        leaderService.removeLeader();</span><br><span class="line">    &#125;</span><br><span class="line">    monitorService.close();</span><br><span class="line">    <span class="keyword">if</span> (reconcileService.isRunning()) &#123;</span><br><span class="line">        reconcileService.stopAsync(); <span class="comment">//终止reconcileService服务</span></span><br><span class="line">    &#125;</span><br><span class="line">    JobRegistry.getInstance().shutdown(jobName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ListenerManager-1"><a href="#ListenerManager-1" class="headerlink" title="ListenerManager"></a>ListenerManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListenerManager</span><span class="params">(<span class="keyword">final</span> CoordinatorRegistryCenter regCenter, <span class="keyword">final</span> String jobName, <span class="keyword">final</span> List&lt;ElasticJobListener&gt; elasticJobListeners, <span class="keyword">final</span> SchedulerFacade schedulerFacade)</span> </span>&#123;</span><br><span class="line">        ... <span class="comment">//省略部分代码</span></span><br><span class="line">        </span><br><span class="line">        regCenterConnectionStateListener = <span class="keyword">new</span> RegistryCenterConnectionStateListener(regCenter, jobName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启所有监听器.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAllListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ... <span class="comment">//省略部分代码</span></span><br><span class="line">        </span><br><span class="line">        jobNodeStorage.addConnectionStateListener(regCenterConnectionStateListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">在```ListenerManager.startAllListeners()```中，注册了```regCenterConnectionStateListener```但是在终止作业调度时，并没有注销```regCenterConnectionStateListener```。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.2 改造</span><br><span class="line"></span><br><span class="line">#### 终止作业调度时注销RegCenterConnectionStateListener</span><br><span class="line"></span><br><span class="line">- **ListenerManager** 增加注销监听器的方法。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销监听器.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRegCenterConnectionStateListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jobNodeStorage.removeConnectionStateListener(regCenterConnectionStateListener);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>SchedulerFacade</strong> 终止作业调度时，注销RegCenterConnectionStateListener监听器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止作业调度.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    listenerManager.removeRegCenterConnectionStateListener();</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-ExecutorServiceHandlerRegistry"><a href="#3-ExecutorServiceHandlerRegistry" class="headerlink" title="3. ExecutorServiceHandlerRegistry"></a>3. ExecutorServiceHandlerRegistry</h2><p>作业终止时，线程池服务处理器注册表<code>ExecutorServiceHandlerRegistry</code>没有清理。</p><h3 id="3-1-分析"><a href="#3-1-分析" class="headerlink" title="3.1 分析"></a>3.1 分析</h3><h4 id="ExecutorServiceHandlerRegistry"><a href="#ExecutorServiceHandlerRegistry" class="headerlink" title="ExecutorServiceHandlerRegistry"></a>ExecutorServiceHandlerRegistry</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池服务处理器注册表.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangliang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorServiceHandlerRegistry</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, ExecutorService&gt; REGISTRY = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取线程池服务.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName 作业名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executorServiceHandler 线程池服务处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 线程池服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ExecutorService <span class="title">getExecutorServiceHandler</span><span class="params">(<span class="keyword">final</span> String jobName, <span class="keyword">final</span> ExecutorServiceHandler executorServiceHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!REGISTRY.containsKey(jobName)) &#123;</span><br><span class="line">            REGISTRY.put(jobName, executorServiceHandler.createExecutorService(jobName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REGISTRY.get(jobName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从注册表中删除该作业线程池服务.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName 作业名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String jobName)</span> </span>&#123;</span><br><span class="line">        REGISTRY.remove(jobName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，<code>ExecutorServiceHandlerRegistry.remove(jobName)</code>在目前版本中没有被调用过。</p><h3 id="3-2-改造"><a href="#3-2-改造" class="headerlink" title="3.2 改造"></a>3.2 改造</h3><h4 id="终止作业调度时清理线程池服务处理器注册表"><a href="#终止作业调度时清理线程池服务处理器注册表" class="headerlink" title="终止作业调度时清理线程池服务处理器注册表"></a>终止作业调度时清理线程池服务处理器注册表</h4><ul><li><strong>JobRegistry</strong> 终止任务调度方法中增加线程池服务处理器注册表清理的操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止任务调度.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jobName 作业名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">final</span> String jobName)</span> </span>&#123;</span><br><span class="line">    JobScheduleController scheduleController = schedulerMap.remove(jobName);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != scheduleController) &#123;</span><br><span class="line">        scheduleController.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    CoordinatorRegistryCenter regCenter = regCenterMap.remove(jobName);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != regCenter) &#123;</span><br><span class="line">        regCenter.evictCacheData(<span class="string">"/"</span> + jobName);</span><br><span class="line">    &#125;</span><br><span class="line">    jobInstanceMap.remove(jobName);</span><br><span class="line">    jobRunningMap.remove(jobName);</span><br><span class="line">    currentShardingTotalCountMap.remove(jobName);</span><br><span class="line">    ExecutorServiceHandlerRegistry.remove(jobName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-Quartz"><a href="#4-Quartz" class="headerlink" title="4. Quartz"></a>4. Quartz</h2><p>作业终止时，quartz相关资源没有释放回收。</p><h3 id="4-1-分析"><a href="#4-1-分析" class="headerlink" title="4.1 分析"></a>4.1 分析</h3><h4 id="JobScheduler-1"><a href="#JobScheduler-1" class="headerlink" title="JobScheduler"></a>JobScheduler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Scheduler <span class="title">createScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Scheduler result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        StdSchedulerFactory factory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">        factory.initialize(getBaseQuartzProperties());</span><br><span class="line">        result = factory.getScheduler();</span><br><span class="line">        result.getListenerManager().addTriggerListener(schedulerFacade.newJobTriggerListener());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SchedulerException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JobSystemException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Properties <span class="title">getBaseQuartzProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Properties result = <span class="keyword">new</span> Properties();</span><br><span class="line">    result.put(<span class="string">"org.quartz.threadPool.class"</span>, org.quartz.simpl.SimpleThreadPool<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">    result.put(<span class="string">"org.quartz.threadPool.threadCount"</span>, <span class="string">"1"</span>);</span><br><span class="line">    result.put(<span class="string">"org.quartz.scheduler.instanceName"</span>, liteJobConfig.getJobName());</span><br><span class="line">    result.put(<span class="string">"org.quartz.jobStore.misfireThreshold"</span>, <span class="string">"1"</span>);</span><br><span class="line">    <span class="comment">//设置JobShutdownHookPlugin</span></span><br><span class="line">    result.put(<span class="string">"org.quartz.plugin.shutdownhook.class"</span>, JobShutdownHookPlugin<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">    result.put(<span class="string">"org.quartz.plugin.shutdownhook.cleanShutdown"</span>, Boolean.TRUE.toString());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JobShutdownHookPlugin"><a href="#JobShutdownHookPlugin" class="headerlink" title="JobShutdownHookPlugin"></a>JobShutdownHookPlugin</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 作业关闭钩子.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangliang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JobShutdownHookPlugin</span> <span class="keyword">extends</span> <span class="title">ShutdownHookPlugin</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String jobName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Scheduler scheduler, <span class="keyword">final</span> ClassLoadHelper classLoadHelper)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initialize(name, scheduler, classLoadHelper);</span><br><span class="line">        jobName = scheduler.getSchedulerName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CoordinatorRegistryCenter regCenter = JobRegistry.getInstance().getRegCenter(jobName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == regCenter) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LeaderService leaderService = <span class="keyword">new</span> LeaderService(regCenter, jobName);</span><br><span class="line">        <span class="keyword">if</span> (leaderService.isLeader()) &#123;</span><br><span class="line">            leaderService.removeLeader();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> InstanceService(regCenter, jobName).removeInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ShutdownHookPlugin"><a href="#ShutdownHookPlugin" class="headerlink" title="ShutdownHookPlugin"></a>ShutdownHookPlugin</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(String name, <span class="keyword">final</span> Scheduler scheduler, ClassLoadHelper classLoadHelper)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line"></span><br><span class="line">    getLog().info(<span class="string">"Registering Quartz shutdown hook."</span>);</span><br><span class="line"></span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(<span class="string">"Quartz Shutdown-Hook "</span></span><br><span class="line">            + scheduler.getSchedulerName()) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            getLog().info(<span class="string">"Shutting down Quartz..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                scheduler.shutdown(isCleanShutdown());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                getLog().info(</span><br><span class="line">                        <span class="string">"Error shutting down Quartz: "</span> + e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Runtime.getRuntime().addShutdownHook(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.2 改造</span><br><span class="line"></span><br><span class="line">#### 手动终止作业时将对应的shutdownhook线程从JVM中删除</span><br><span class="line"></span><br><span class="line">- **JobShutdownHookPlugin** </span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public final class JobShutdownHookPlugin extends ShutdownHookPlugin &#123;</span><br><span class="line">    </span><br><span class="line">    private String jobName;</span><br><span class="line">    </span><br><span class="line">    private Thread t;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void initialize(final String name, final Scheduler scheduler, final ClassLoadHelper classLoadHelper) throws SchedulerException &#123;</span><br><span class="line">        getLog().info(&quot;Registering Quartz shutdown hook.&quot;);</span><br><span class="line">    </span><br><span class="line">        t &#x3D; new Thread(&quot;Quartz Shutdown-Hook &quot;</span><br><span class="line">                + scheduler.getSchedulerName()) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                getLog().info(&quot;Shutting down Quartz...&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    scheduler.shutdown(isCleanShutdown());</span><br><span class="line">                &#125; catch (SchedulerException e) &#123;</span><br><span class="line">                    getLog().info(</span><br><span class="line">                            &quot;Error shutting down Quartz: &quot; + e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        Runtime.getRuntime().addShutdownHook(t);</span><br><span class="line">        jobName &#x3D; scheduler.getSchedulerName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void shutdown() &#123;</span><br><span class="line">        CoordinatorRegistryCenter regCenter &#x3D; JobRegistry.getInstance().getRegCenter(jobName);</span><br><span class="line">        if (null &#x3D;&#x3D; regCenter) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        LeaderService leaderService &#x3D; new LeaderService(regCenter, jobName);</span><br><span class="line">        if (leaderService.isLeader()) &#123;</span><br><span class="line">            leaderService.removeLeader();</span><br><span class="line">        &#125;</span><br><span class="line">        new InstanceService(regCenter, jobName).removeInstance();</span><br><span class="line">        &#x2F;&#x2F;判断当前执行线程是否是shutdownhook线程，如果不是，则将作业的shutdownhook从JVM中删除</span><br><span class="line">        if (!Thread.currentThread().getName().equals(t.getName())) &#123;</span><br><span class="line">            Runtime.getRuntime().removeShutdownHook(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elastic-job-lite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> elastic-job-lite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elastic-job-lite issues 整理（二）</title>
      <link href="/2019/11/25/elastic-job/ADOListener/"/>
      <url>/2019/11/25/elastic-job/ADOListener/</url>
      
        <content type="html"><![CDATA[<h1 id="issues-类型"><a href="#issues-类型" class="headerlink" title="issues 类型"></a>issues 类型</h1><p>分布式唯一执行task监听器AbstractDistributeOnceElasticJobListener问题。<a id="more"></a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="AbstractElasticJobExecutor"><a href="#AbstractElasticJobExecutor" class="headerlink" title="AbstractElasticJobExecutor"></a>AbstractElasticJobExecutor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行作业.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//作业执行前的方法</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jobFacade.beforeJobExecuted(shardingContexts);</span><br><span class="line">        <span class="comment">//CHECKSTYLE:OFF</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable cause) &#123;</span><br><span class="line">        <span class="comment">//CHECKSTYLE:ON</span></span><br><span class="line">        jobExceptionHandler.handleException(jobName, cause);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行"正常"触发的作业</span></span><br><span class="line">    execute(shardingContexts, JobExecutionEvent.ExecutionSource.NORMAL_TRIGGER);</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//作业执行后的方法</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jobFacade.afterJobExecuted(shardingContexts);</span><br><span class="line">        <span class="comment">//CHECKSTYLE:OFF</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable cause) &#123;</span><br><span class="line">        <span class="comment">//CHECKSTYLE:ON</span></span><br><span class="line">        jobExceptionHandler.handleException(jobName, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LiteJobFacade"><a href="#LiteJobFacade" class="headerlink" title="LiteJobFacade"></a>LiteJobFacade</h3><p>作业监听器的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeJobExecuted</span><span class="params">(<span class="keyword">final</span> ShardingContexts shardingContexts)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ElasticJobListener each : elasticJobListeners) &#123;</span><br><span class="line">        each.beforeJobExecuted(shardingContexts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterJobExecuted</span><span class="params">(<span class="keyword">final</span> ShardingContexts shardingContexts)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ElasticJobListener each : elasticJobListeners) &#123;</span><br><span class="line">        each.afterJobExecuted(shardingContexts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ElasticJobListener"><a href="#ElasticJobListener" class="headerlink" title="ElasticJobListener"></a>ElasticJobListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弹性化分布式作业监听器接口.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElasticJobListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作业执行前的执行的方法.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shardingContexts 分片上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeJobExecuted</span><span class="params">(ShardingContexts shardingContexts)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作业执行后的执行的方法.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shardingContexts 分片上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterJobExecuted</span><span class="params">(ShardingContexts shardingContexts)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractDistributeOnceElasticJobListener"><a href="#AbstractDistributeOnceElasticJobListener" class="headerlink" title="AbstractDistributeOnceElasticJobListener"></a>AbstractDistributeOnceElasticJobListener</h3><p>在分布式作业中只执行一次的监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">beforeJobExecuted</span><span class="params">(<span class="keyword">final</span> ShardingContexts shardingContexts)</span> </span>&#123;</span><br><span class="line">    guaranteeService.registerStart(shardingContexts.getShardingItemParameters().keySet());</span><br><span class="line">    <span class="keyword">if</span> (guaranteeService.isAllStarted()) &#123;</span><br><span class="line">        doBeforeJobExecutedAtLastStarted(shardingContexts);</span><br><span class="line">        guaranteeService.clearAllStartedInfo();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> before = timeService.getCurrentMillis();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (startedWait) &#123;</span><br><span class="line">            startedWait.wait(startedTimeoutMilliseconds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException ex) &#123;</span><br><span class="line">        Thread.interrupted();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timeService.getCurrentMillis() - before &gt;= startedTimeoutMilliseconds) &#123;</span><br><span class="line">        guaranteeService.clearAllStartedInfo();</span><br><span class="line">        handleTimeout(startedTimeoutMilliseconds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">afterJobExecuted</span><span class="params">(<span class="keyword">final</span> ShardingContexts shardingContexts)</span> </span>&#123;</span><br><span class="line">    guaranteeService.registerComplete(shardingContexts.getShardingItemParameters().keySet());</span><br><span class="line">    <span class="keyword">if</span> (guaranteeService.isAllCompleted()) &#123;</span><br><span class="line">        doAfterJobExecutedAtLastCompleted(shardingContexts);</span><br><span class="line">        guaranteeService.clearAllCompletedInfo();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> before = timeService.getCurrentMillis();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (completedWait) &#123;</span><br><span class="line">            completedWait.wait(completedTimeoutMilliseconds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException ex) &#123;</span><br><span class="line">        Thread.interrupted();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timeService.getCurrentMillis() - before &gt;= completedTimeoutMilliseconds) &#123;</span><br><span class="line">        guaranteeService.clearAllCompletedInfo();</span><br><span class="line">        handleTimeout(completedTimeoutMilliseconds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑流程(以beforeJobExecuted为例):</p><ol><li><p>注册分配到本作业实例的分片</p><p> 保存（PERSISTENT型）<code>/${JOB_NAME}/guarantee/started/${ITEM_INDEX}</code>节点，值为空串( “” )</p></li><li><p>判断是否所有的分片都注册完毕</p><p> 当<code>/${JOB_NAME}/guarantee/started/</code> 目录下，所有作业分片项具备，即注册总数等于作业分片总数( JobCoreConfiguration.ShardingTotalCount )，代表所有的作业分片均准备完毕。</p></li><li><p>如果步骤2结果为true，则可以执行分布式唯一任务，调用完成后，删除注册节点<code>/${JOB_NAME}/guarantee/started/</code></p></li><li><p>如果步骤2结果为false，则继续等待等待唤醒或直至超时，若超时，则删除注册节点<code>/${JOB_NAME}/guarantee/started/</code></p></li></ol><p><strong>注意：</strong></p><p>上述流程无法保证“分布式唯一”，因为注册分片和判断是否准备完毕操作在分布式场景中不是原子操作。当多个实例注册完分片后，再判断时，很大的几率都会判断满足分片注册完毕的条件，则会同时执行，这样就造成了分布式场景下==不唯一==的问题。</p><h2 id="改造方案"><a href="#改造方案" class="headerlink" title="改造方案"></a>改造方案</h2><h3 id="1-参考使用curator“分布式锁”。"><a href="#1-参考使用curator“分布式锁”。" class="headerlink" title="1. 参考使用curator“分布式锁”。"></a>1. 参考使用curator“分布式锁”。</h3><p>使用zookeeper的EPHEMERAL_SEQUENTIAL类型节点的特性，增加执行分布式唯一任务资格的判断，保证在所有分片任务都启动完毕（或执行完毕）后仅有一个实例能执行监听器的方法。</p><p>AbstractDistributeOnceElasticJobListener大致修改逻辑，以doBeforeJobExecutedAtLastStarted为例：</p><ol><li><p>在beforeJobExecuted进行是否所有的任务均启动完毕判断（isAllStarted方法）后，再增加一步判断，判断是否当前节点“是否有资格”去执行分布式唯一的任务。判断“是否有资格”的逻辑即为判断当前实例在EPHEMERAL_SEQUENTIAL类型节点下是否创建了序列最小的节点（即最先创建子节点）。如果是，则视当前节点“有资格”执行分布式唯一的任务，否则则继续原有逻辑。</p></li><li><p>在clearAllStartedInfo中，增加一项处理，将2中创建的临时顺序节点的删除。</p></li></ol><p>doAfterJobExecutedAtLastCompleted的调整类似。</p><h3 id="2-使用拥有分片0的实例来执行分布式唯一任务。"><a href="#2-使用拥有分片0的实例来执行分布式唯一任务。" class="headerlink" title="2. 使用拥有分片0的实例来执行分布式唯一任务。"></a>2. 使用拥有分片0的实例来执行分布式唯一任务。</h3><p>注册分片后，判断当前实例是否拥有分片0（因为无论如何分片，一定会有分片0存在），如果拥有，则判断是否所有分片注册完成，如果准备完毕，则执行，清理分片注册节点，如果未准备完毕，则sleep 500ms后继续一轮判断，直至超时并清理分片注册节点。未拥有分片0的实例逻辑和则就是等待唤醒或直至超时，并清理分片注册节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">beforeJobExecuted</span><span class="params">(<span class="keyword">final</span> ShardingContexts shardingContexts)</span> </span>&#123;</span><br><span class="line">    guaranteeService.registerStart(shardingContexts.getShardingItemParameters().keySet());</span><br><span class="line">    <span class="keyword">long</span> before = timeService.getCurrentMillis();</span><br><span class="line">    <span class="keyword">if</span> (shardingContexts.getShardingItemParameters().containsKey(<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (guaranteeService.isAllStarted()) &#123;</span><br><span class="line">                doBeforeJobExecutedAtLastStarted(shardingContexts);</span><br><span class="line">                guaranteeService.clearAllStartedInfo();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException ex) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (timeService.getCurrentMillis() - before &gt;= startedTimeoutMilliseconds) &#123;</span><br><span class="line">                guaranteeService.clearAllStartedInfo();</span><br><span class="line">                handleTimeout(startedTimeoutMilliseconds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (startedWait) &#123;</span><br><span class="line">                startedWait.wait(startedTimeoutMilliseconds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException ex) &#123;</span><br><span class="line">            Thread.interrupted();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeService.getCurrentMillis() - before &gt;= startedTimeoutMilliseconds) &#123;</span><br><span class="line">            guaranteeService.clearAllStartedInfo();</span><br><span class="line">            handleTimeout(startedTimeoutMilliseconds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">afterJobExecuted</span><span class="params">(<span class="keyword">final</span> ShardingContexts shardingContexts)</span> </span>&#123;</span><br><span class="line">    guaranteeService.registerComplete(shardingContexts.getShardingItemParameters().keySet());</span><br><span class="line">    <span class="keyword">long</span> before = timeService.getCurrentMillis();</span><br><span class="line">    <span class="keyword">if</span> (shardingContexts.getShardingItemParameters().containsKey(<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (guaranteeService.isAllCompleted()) &#123;</span><br><span class="line">                doAfterJobExecutedAtLastCompleted(shardingContexts);</span><br><span class="line">                guaranteeService.clearAllCompletedInfo();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException ex) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (timeService.getCurrentMillis() - before &gt;= completedTimeoutMilliseconds) &#123;</span><br><span class="line">                guaranteeService.clearAllCompletedInfo();</span><br><span class="line">                handleTimeout(completedTimeoutMilliseconds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (completedWait) &#123;</span><br><span class="line">                completedWait.wait(completedTimeoutMilliseconds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException ex) &#123;</span><br><span class="line">            Thread.interrupted();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeService.getCurrentMillis() - before &gt;= completedTimeoutMilliseconds) &#123;</span><br><span class="line">            guaranteeService.clearAllCompletedInfo();</span><br><span class="line">            handleTimeout(completedTimeoutMilliseconds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用“原子”操作。"><a href="#3-使用“原子”操作。" class="headerlink" title="3. 使用“原子”操作。"></a>3. 使用“原子”操作。</h3><p>修改注册节点的结构，不在<code>/${JOB_NAME}/guarantee/started/</code>下注册${ITEM_INDEX}子节点，而是对<code>/${JOB_NAME}/guarantee/started/</code>节点下的值进行累加操作。</p><p>实例注册分片时，将本实例拥有的分片数累加到读取到的<code>/${JOB_NAME}/guarantee/started/</code>节点值上，然后修改<code>/${JOB_NAME}/guarantee/started/</code>节点值。</p><p>使用<code>getDataAndVersion</code>和<code>setDataWithVersion</code>，来确保操作原子性。getDataAndVersion时会读取节点值的数据read_data以及当前版本read_version，setDataWithVersion修改节点值为read_data+实例拥有的分片数，限制的版本为read_version+1，setDataWithVersion出现版本异常时，则说明可能有其他的实例对这个节点进行了修改操作，那么此时，再重新进行一轮<code>getDataAndVersion</code>和<code>setDataWithVersion</code>。整体思路是参考乐观锁的自旋，自旋的最大次数为分片总次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pair&lt;String, Integer&gt; <span class="title">getDataAndVersion</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">    Stat stat = <span class="keyword">new</span> Stat();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ImmutablePair&lt;&gt;(<span class="keyword">new</span> String(client.getData().storingStatIn(stat).forPath(key), Charsets.UTF_8), stat.getVersion());</span><br><span class="line">        <span class="comment">//CHECKSTYLE:OFF</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">        <span class="comment">//CHECKSTYLE:ON</span></span><br><span class="line">        RegExceptionHandler.handleException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">setDataWithVersion</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value, <span class="keyword">final</span> <span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Stat stat = client.setData().withVersion(version).forPath(key, value.getBytes());</span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span> &amp;&amp; stat.getVersion() == (version + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//CHECKSTYLE:OFF</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">        <span class="comment">//CHECKSTYLE:ON</span></span><br><span class="line">        RegExceptionHandler.handleException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elastic-job-lite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> elastic-job-lite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elastic-job-lite issues 整理（一）</title>
      <link href="/2019/10/17/elastic-job/failover/"/>
      <url>/2019/10/17/elastic-job/failover/</url>
      
        <content type="html"><![CDATA[<h1 id="issues-类型"><a href="#issues-类型" class="headerlink" title="issues 类型"></a>issues 类型</h1><p>failover相关问题。<a id="more"></a></p><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><ol><li><p>本地启两个job服务（目前版本必须在本地启动，否则failover无法触发，这是个bug）</p></li><li><p>使用同样的配置（每分钟的0秒开始调度，作业分片8片）</p></li><li><p>运行同样的作业（Simple类型Job，仅打印开始和结束日志，开始和结束日志间sleep 5s）。</p></li></ol><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><ol><li><p>观察其中一个作业instance，job调度开始后，立即关闭该作业服务instance。</p></li><li><p>在另外一个作业instance上，能观察到failover的作业分片的执行。</p></li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="1-JobCrashedJobListener"><a href="#1-JobCrashedJobListener" class="headerlink" title="1. JobCrashedJobListener"></a><strong>1. JobCrashedJobListener</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobCrashedJobListener</span> <span class="keyword">extends</span> <span class="title">AbstractJobListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">final</span> Type eventType, <span class="keyword">final</span> String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFailoverEnabled() &amp;&amp; Type.NODE_REMOVED == eventType &amp;&amp; instanceNode.isInstancePath(path)) &#123;</span><br><span class="line">            String jobInstanceId = path.substring(instanceNode.getInstanceFullPath().length() + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (jobInstanceId.equals(JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId())) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Integer&gt; failoverItems = failoverService.getFailoverItems(jobInstanceId);</span><br><span class="line">            <span class="keyword">if</span> (!failoverItems.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> each : failoverItems) &#123;</span><br><span class="line">                    failoverService.setCrashedFailoverFlag(each);</span><br><span class="line">                    failoverService.failoverIfNecessary();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> each : shardingService.getShardingItems(jobInstanceId)) &#123;</span><br><span class="line">                    failoverService.setCrashedFailoverFlag(each);</span><br><span class="line">                    failoverService.failoverIfNecessary();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是首次模拟failover，且zk中数据没有遗留垃圾数据的话，关闭一个作业instance后会进入以下逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> each : shardingService.getShardingItems(jobInstanceId)) &#123;</span><br><span class="line">    failoverService.setCrashedFailoverFlag(each);</span><br><span class="line">    failoverService.failoverIfNecessary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会进行两个操作：</p><ul><li><p>设置failover标记</p>  <figure class="highlight plain"><figcaption><span>该数据节点为永久节点，存储空串( "" )。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 进行failover处理</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;failoverService.failoverIfNecessary()&#96;&#96;&#96; **如果需要失效转移,** 则执行作业失效转移.</span><br><span class="line"></span><br><span class="line">&lt;span id&#x3D;&quot;failoverService&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">### **2. FailoverService** </span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 如果需要失效转移, 则执行作业失效转移.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void failoverIfNecessary() &#123;</span><br><span class="line">        if (needFailover()) &#123;</span><br><span class="line">            jobNodeStorage.executeInLeader(FailoverNode.LATCH, new FailoverLeaderExecutionCallback());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private boolean needFailover() &#123;</span><br><span class="line">        return jobNodeStorage.isJobNodeExisted(FailoverNode.ITEMS_ROOT) &amp;&amp; !jobNodeStorage.getJobNodeChildrenKeys(FailoverNode.ITEMS_ROOT).isEmpty()</span><br><span class="line">                &amp;&amp; !JobRegistry.getInstance().isJobRunning(jobName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-1-needFailover"><a href="#2-1-needFailover" class="headerlink" title="2.1 needFailover()"></a>2.1 <code>needFailover()</code></h4><p>判断是否满足失效转移条件。</p><ul><li><p><code>/${JOB_NAME}/leader/failover/items/</code> 有失效转移的作业分片项。</p></li><li><p>当前作业不在运行中。</p></li></ul><h4 id="2-2-jobNodeStorage-executeInLeader"><a href="#2-2-jobNodeStorage-executeInLeader" class="headerlink" title="2.2 jobNodeStorage.executeInLeader"></a>2.2 <code>jobNodeStorage.executeInLeader</code></h4><blockquote><p>使用 FailoverNode.LATCH( <code>/${JOB_NAME}/leader/failover/latch</code> )构成的分布式锁，<br>保证 FailoverLeaderExecutionCallback 的回调方法同一时间，即使多个作业节点调用，有且仅有一个作业节点进行执行。另外，带有 Leader 关键字，实际并非必须在主节点进行操作，任何一个拿到分布式锁的作业节点都可以调用。</p></blockquote><h4 id="2-3-FailoverLeaderExecutionCallback"><a href="#2-3-FailoverLeaderExecutionCallback" class="headerlink" title="2.3 FailoverLeaderExecutionCallback"></a>2.3 <code>FailoverLeaderExecutionCallback</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FailoverLeaderExecutionCallback</span> <span class="keyword">implements</span> <span class="title">LeaderExecutionCallback</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (JobRegistry.getInstance().isShutdown(jobName) || !needFailover()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> crashedItem = Integer.parseInt(jobNodeStorage.getJobNodeChildrenKeys(FailoverNode.ITEMS_ROOT).get(<span class="number">0</span>));</span><br><span class="line">        log.debug(<span class="string">"Failover job '&#123;&#125;' begin, crashed item '&#123;&#125;'"</span>, jobName, crashedItem);</span><br><span class="line">        jobNodeStorage.fillEphemeralJobNode(FailoverNode.getExecutionFailoverNode(crashedItem), JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId());</span><br><span class="line">        jobNodeStorage.removeJobNodeIfExisted(FailoverNode.getItemsNode(crashedItem));</span><br><span class="line">        <span class="comment">// TODO 不应使用triggerJob, 而是使用executor统一调度</span></span><br><span class="line">        JobScheduleController jobScheduleController = JobRegistry.getInstance().getJobScheduleController(jobName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jobScheduleController) &#123;</span><br><span class="line">            jobScheduleController.triggerJob();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>JobNodeStorage.getJobNodeChildrenKeys(FailoverNode.ITEMS_ROOT).get(0)</code> 获得一个<code>/${JOB_NAME}/leader/failover/items/${ITEM_ID}</code> 作业分片项。</p></li><li><p><code>JobNodeStorage.fillEphemeralJobNode(...)</code> 设置临时节点<code>/${JOB_NAME}/sharding/${ITEM_ID}/failover</code>值为<code>${JOB_INSTANCE_ID}</code>。</p></li><li><p><code>JobNodeStorage.removeJobNodeIfExisted(...)</code> 移除<code>/${JOB_NAME}/leader/failover/items/${ITEM_ID}</code>节点。</p></li><li><p><code>JobScheduleController.triggerJob()</code> 触发作业。 </p></li></ul><h3 id="3-AbstractElasticJobExecutor"><a href="#3-AbstractElasticJobExecutor" class="headerlink" title="3. AbstractElasticJobExecutor"></a><strong>3. AbstractElasticJobExecutor</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行作业.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前作业instance的分片上下文</span></span><br><span class="line">    ShardingContexts shardingContexts = jobFacade.getShardingContexts();</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行"正常"触发的作业</span></span><br><span class="line">    execute(shardingContexts, JobExecutionEvent.ExecutionSource.NORMAL_TRIGGER);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行"failover"作业</span></span><br><span class="line">    jobFacade.failoverIfNecessary();</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>jobFacade.getShardingContexts()</code> 获取当前作业instance的分片上下文</p></li><li><p><code>execute(...)</code> 执行”正常”触发的作业</p></li><li><p><code>jobFacade.failoverIfNecessary()</code> 执行”failover”作业</p></li></ul><h3 id="4-LiteJobFacade"><a href="#4-LiteJobFacade" class="headerlink" title="4. LiteJobFacade"></a><strong>4. LiteJobFacade</strong></h3><h4 id="4-1-getShardingContexts-获取当前作业instance的分片上下文"><a href="#4-1-getShardingContexts-获取当前作业instance的分片上下文" class="headerlink" title="4.1 getShardingContexts()获取当前作业instance的分片上下文"></a>4.1 <code>getShardingContexts()</code>获取当前作业instance的分片上下文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShardingContexts <span class="title">getShardingContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isFailover = configService.load(<span class="keyword">true</span>).isFailover();</span><br><span class="line">    <span class="keyword">if</span> (isFailover) &#123;</span><br><span class="line">        List&lt;Integer&gt; failoverShardingItems = failoverService.getLocalFailoverItems();</span><br><span class="line">        <span class="keyword">if</span> (!failoverShardingItems.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> executionContextService.getJobShardingContext(failoverShardingItems);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>failoverService.getLocalFailoverItems()</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取运行在本作业服务器的失效转移分片项集合.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 运行在本作业服务器的失效转移分片项集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getLocalFailoverItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (JobRegistry.getInstance().isShutdown(jobName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getFailoverItems(JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取作业服务器的失效转移分片项集合.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jobInstanceId 作业运行实例主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 作业失效转移的分片项集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getFailoverItems</span><span class="params">(<span class="keyword">final</span> String jobInstanceId)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; items = jobNodeStorage.getJobNodeChildrenKeys(ShardingNode.ROOT);</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(items.size());</span><br><span class="line">    <span class="keyword">for</span> (String each : items) &#123;</span><br><span class="line">        <span class="keyword">int</span> item = Integer.parseInt(each);</span><br><span class="line">        String node = FailoverNode.getExecutionFailoverNode(item);</span><br><span class="line">        <span class="keyword">if</span> (jobNodeStorage.isJobNodeExisted(node) &amp;&amp; jobInstanceId.equals(jobNodeStorage.getJobNodeDataDirectly(node))) &#123;</span><br><span class="line">            result.add(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  获取<code>/${JOB_NAME}/sharding/${ITEM_ID}/failover</code>中值和jobInstanceId相等的所有${ITEM_ID}。</p></li></ul><h4 id="4-2-failoverIfNecessary-执行”failover”作业"><a href="#4-2-failoverIfNecessary-执行”failover”作业" class="headerlink" title="4.2 failoverIfNecessary()执行”failover”作业"></a>4.2 <code>failoverIfNecessary()</code>执行”failover”作业</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failoverIfNecessary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (configService.load(<span class="keyword">true</span>).isFailover()) &#123;</span><br><span class="line">        failoverService.failoverIfNecessary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>failoverService.failoverIfNecessary()</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果需要失效转移, 则执行作业失效转移.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failoverIfNecessary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (needFailover()) &#123;</span><br><span class="line">        jobNodeStorage.executeInLeader(FailoverNode.LATCH, <span class="keyword">new</span> FailoverLeaderExecutionCallback());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">needFailover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobNodeStorage.isJobNodeExisted(FailoverNode.ITEMS_ROOT) &amp;&amp; !jobNodeStorage.getJobNodeChildrenKeys(FailoverNode.ITEMS_ROOT).isEmpty()</span><br><span class="line">            &amp;&amp; !JobRegistry.getInstance().isJobRunning(jobName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  逻辑又回到<a href="#failoverService">第2节</a>。</p></li></ul><h2 id="issues-梳理"><a href="#issues-梳理" class="headerlink" title="issues 梳理"></a>issues 梳理</h2><h3 id="1-Failover无法触发"><a href="#1-Failover无法触发" class="headerlink" title="1. Failover无法触发"></a><strong>1. Failover无法触发</strong></h3><p>相关issue：<a href="https://github.com/elasticjob/elastic-job-lite/issues/522" target="_blank" rel="noopener">#522</a> <a href="https://github.com/elasticjob/elastic-job-lite/issues/523" target="_blank" rel="noopener">#523</a> <a href="https://github.com/elasticjob/elastic-job-lite/issues/526" target="_blank" rel="noopener">#526</a><br><a href="https://github.com/elasticjob/elastic-job-lite/issues/571" target="_blank" rel="noopener">#571</a> <a href="https://github.com/elasticjob/elastic-job-lite/issues/577" target="_blank" rel="noopener">#577</a><br><a href="https://github.com/elasticjob/elastic-job-lite/issues/669" target="_blank" rel="noopener">#669</a> </p><p>目前版本，如果多个实例不在同一台服务器上，failover会失败，相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JobCrashedJobListener.dataChanged</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> each : shardingService.getShardingItems(jobInstanceId)) &#123;</span><br><span class="line">    failoverService.setCrashedFailoverFlag(each);</span><br><span class="line">    failoverService.failoverIfNecessary();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ShardingService.getShardingItems</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getShardingItems</span><span class="params">(<span class="keyword">final</span> String jobInstanceId)</span> </span>&#123;</span><br><span class="line">    JobInstance jobInstance = <span class="keyword">new</span> JobInstance(jobInstanceId);</span><br><span class="line">    <span class="keyword">if</span> (!serverService.isAvailableServer(jobInstance.getIp())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//ServerService.isAvailableServer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailableServer</span><span class="params">(<span class="keyword">final</span> String ip)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isEnableServer(ip) &amp;&amp; hasOnlineInstances(ip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasOnlineInstances</span><span class="params">(<span class="keyword">final</span> String ip)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String each : jobNodeStorage.getJobNodeChildrenKeys(InstanceNode.ROOT)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (each.startsWith(ip)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">实际上，当作业节点crash时，&#96;&#96;&#96;&#x2F;$&#123;JOB_NAME&#125;&#x2F;instances&#x2F;&#96;&#96;&#96;下是不会存在失效jobInstanceId对应的server记录，所以&#96;&#96;&#96;ServerService.hasOnlineInstances&#96;&#96;&#96;始终是false。</span><br><span class="line"></span><br><span class="line">建议在shardingService中新增一个获取fail节点所分配的sharding items的方法，并剔除hasOnlineInstances的判断。</span><br><span class="line"></span><br><span class="line">### **2. Failover多余补偿**</span><br><span class="line"></span><br><span class="line">相关issue：[#669](https:&#x2F;&#x2F;github.com&#x2F;elasticjob&#x2F;elastic-job-lite&#x2F;issues&#x2F;669) [#671](https:&#x2F;&#x2F;github.com&#x2F;elasticjob&#x2F;elastic-job-lite&#x2F;issues&#x2F;671)</span><br><span class="line"></span><br><span class="line">在failover正常处理的前提下，当某个作业实例刚刚执行完调度任务后如果发生了crash，那么存活的节点会在空闲的情况下获取crash实例的分片，进行failover。进行failover是调用&#96;&#96;&#96;scheduler.triggerJob&#96;&#96;&#96;，所以理论上是有可能会立即执行，这就相当于刚刚做完的job分片任务，在其他实例节点上又被立即执行了一次。</span><br><span class="line"></span><br><span class="line">社区上有个PR:#682是针对这个bug，但是该PR的改造思路依赖elastic-job-lite开启了monitorExecution，并且修改monitorExecution功能启用时创建的节点类型，由临时改为永久，改动较大，且会引入其他的隐患。</span><br><span class="line"></span><br><span class="line">elastic-job-lite的源码上，有注释说明开启failover时必须启用monitorExecution（注：官网的配置说明上并没有相关描述），可见最初的思路是结合monitorExecution来限制failover的执行时机，但是这个逻辑是冲突的，因为当实例节点crash时，相关临时节点的数据都会丢失，无法使用它们来参与判断，而且目前版本的代码上没有任何的逻辑依据是failover和monitorExecution必须结合使用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### **3. JobCrashedJobListener逻辑冲突**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">    List&lt;Integer&gt; failoverItems &#x3D; failoverService.getFailoverItems(jobInstanceId);</span><br><span class="line">    if (!failoverItems.isEmpty()) &#123;</span><br><span class="line">        for (int each : failoverItems) &#123;</span><br><span class="line">            failoverService.setCrashedFailoverFlag(each);</span><br><span class="line">            failoverService.failoverIfNecessary();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>FailoverService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCrashedFailoverFlag</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isFailoverAssigned(item)) &#123;</span><br><span class="line">        jobNodeStorage.createJobNodeIfNeeded(FailoverNode.getItemsNode(item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFailoverAssigned</span><span class="params">(<span class="keyword">final</span> Integer item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobNodeStorage.isJobNodeExisted(FailoverNode.getExecutionFailoverNode(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getFailoverItems</span><span class="params">(<span class="keyword">final</span> String jobInstanceId)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; items = jobNodeStorage.getJobNodeChildrenKeys(ShardingNode.ROOT);</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(items.size());</span><br><span class="line">    <span class="keyword">for</span> (String each : items) &#123;</span><br><span class="line">        <span class="keyword">int</span> item = Integer.parseInt(each);</span><br><span class="line">        String node = FailoverNode.getExecutionFailoverNode(item);</span><br><span class="line">        <span class="keyword">if</span> (jobNodeStorage.isJobNodeExisted(node) &amp;&amp; jobInstanceId.equals(jobNodeStorage.getJobNodeDataDirectly(node))) &#123;</span><br><span class="line">            result.add(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;setCrashedFailoverFlag&#96;&#96;&#96;中调用的&#96;&#96;&#96;isFailoverAssigned&#96;&#96;&#96;会判断&#96;&#96;&#96;&#x2F;$&#123;JOB_NAME&#125;&#x2F;sharding&#x2F;$item&#x2F;failover&#96;&#96;&#96;是否存在。</span><br><span class="line"></span><br><span class="line">这两块逻辑是完全冲突的，也就是说&#96;&#96;&#96;jobNodeStorage.createJobNodeIfNeeded(FailoverNode.getItemsNode(item));&#96;&#96;&#96;这段代码在常规逻辑下不可能会执行。</span><br><span class="line"></span><br><span class="line">相关讨论可以参考 [#671](https:&#x2F;&#x2F;github.com&#x2F;elasticjob&#x2F;elastic-job-lite&#x2F;issues&#x2F;671)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### **4. triggerJob处理**</span><br><span class="line"></span><br><span class="line">当作业实例发生crash时，JobCrashedJobListener会把crash的实例分之前配到的分片项全部抓取过来，然后设置failover标志，并进行失效转移（如果有必要）。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">    for (int each : shardingService.getShardingItems(jobInstanceId)) &#123;</span><br><span class="line">        failoverService.setCrashedFailoverFlag(each);</span><br><span class="line">        failoverService.failoverIfNecessary();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果失效instance拥有多个分片项的话，会多次执行failoverService.failoverIfNecessary()，这里就和和AbstractElasticJobExecutor.execute()中的jobFacade.failoverIfNecessary()有些重复。</p><p>建议统一设置failover标志，然后调用一次failoverService.failoverIfNecessary()。</p><p>相关讨论可以参考 <a href="https://github.com/elasticjob/elastic-job-lite/issues/671" target="_blank" rel="noopener">#671</a></p>]]></content>
      
      
      <categories>
          
          <category> elastic-job-lite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> elastic-job-lite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul Exporter部署</title>
      <link href="/2019/08/29/consul/consul-exporter/"/>
      <url>/2019/08/29/consul/consul-exporter/</url>
      
        <content type="html"><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/prometheus/consul_exporter/releases/download/v0.5.0/consul_exporter-0.5.0.linux-arm64.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf consul_exporter-0.5.0.linux-arm64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv consul_exporter /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure></li><li><p>注意</p></li></ul><p><strong>关闭防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h2 id="systemd配置"><a href="#systemd配置" class="headerlink" title="systemd配置"></a>systemd配置</h2><ul><li>/etc/systemd/system/路径下创建consul_exporter.service文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/systemd/system/consul_exporter.service</span><br></pre></td></tr></table></figure><ul><li>/etc/systemd/system/consul_exporter.service文件中添加配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=<span class="string">"Consul Exporter"</span></span><br><span class="line">Documentation=https://github.com/prometheus/consul_exporter/</span><br><span class="line">Requires=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/consul_exporter --consul.timeout=5000ms --consul.server=registry.ddcloud.api:8500/ </span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Consul </category>
          
      </categories>
      
      
        <tags>
            
            <tag> registry </tag>
            
            <tag> consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul集群部署</title>
      <link href="/2019/08/27/consul/consul-deploy/"/>
      <url>/2019/08/27/consul/consul-deploy/</url>
      
        <content type="html"><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --remote-name https://releases.hashicorp.com/consul/1.5.1/consul_1.5.1_linux_amd64.zip</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip consul_1.5.1_linux_amd64.zip</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv consul /usr/<span class="built_in">local</span>/bin</span><br><span class="line">mkdir /etc/consul.d</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul --version</span><br></pre></td></tr></table></figure></li><li><p>注意</p></li></ul><p><strong>关闭防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h2 id="systemd配置"><a href="#systemd配置" class="headerlink" title="systemd配置"></a>systemd配置</h2><ul><li>/etc/systemd/system/路径下创建consul.service文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/systemd/system/consul.service</span><br></pre></td></tr></table></figure><ul><li>/etc/systemd/system/consul.service文件中添加配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=<span class="string">"Consul"</span></span><br><span class="line">Documentation=https://www.consul.io/</span><br><span class="line">Requires=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">ConditionFileNotEmpty=/etc/consul.d/consul.hcl</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/consul agent -config-dir=/etc/consul.d/</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/bin/consul reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ul><h2 id="Consul配置文件"><a href="#Consul配置文件" class="headerlink" title="Consul配置文件"></a>Consul配置文件</h2><h3 id="General-configuration"><a href="#General-configuration" class="headerlink" title="General configuration"></a>General configuration</h3><ul><li><p>创建consul配置目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/consul.d</span><br></pre></td></tr></table></figure></li><li><p>/etc/consul.d/路径下创建consul通用配置文件consul.hcl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/consul.d/consul.hcl</span><br></pre></td></tr></table></figure></li><li><p>consul.hcl中添加配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Servcer配置</span></span><br><span class="line">datacenter = <span class="string">"dc1"</span></span><br><span class="line">node_name = <span class="string">"svr1"</span></span><br><span class="line">data_dir = <span class="string">"/tmp/consul"</span></span><br><span class="line">client_addr = <span class="string">"0.0.0.0"</span></span><br><span class="line">retry_join = [<span class="string">"10.255.242.230"</span>,<span class="string">"10.255.242.231"</span>]</span><br><span class="line">performance &#123;</span><br><span class="line">  raft_multiplier = 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Client配置</span></span><br><span class="line">datacenter = <span class="string">"dc1"</span></span><br><span class="line">node_name = <span class="string">"clt1"</span></span><br><span class="line">data_dir = <span class="string">"/tmp/consul"</span></span><br><span class="line">client_addr = <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="comment">#log_file = "/tmp/consul/consul.log"</span></span><br><span class="line">retry_join = [<span class="string">"10.255.242.229"</span>,<span class="string">"10.255.242.230"</span>,<span class="string">"10.255.242.231"</span>]</span><br><span class="line">performance &#123;</span><br><span class="line">  raft_multiplier = 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Server-configuration"><a href="#Server-configuration" class="headerlink" title="Server configuration"></a>Server configuration</h3><ul><li><p>/etc/consul.d/路径下创建consul server配置文件server.hcl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/consul.d/server.hcl</span><br></pre></td></tr></table></figure></li><li><p>server.hcl中添加配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server = <span class="literal">true</span></span><br><span class="line">bootstrap_expect = 3</span><br><span class="line">ui = <span class="literal">true</span></span><br><span class="line">telemetry &#123; </span><br><span class="line">  disable_hostname = <span class="literal">true</span>,</span><br><span class="line">  prometheus_retention_time = <span class="string">"30m"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：开启consul server的telemetry，需要配置disable_hostname = true以及设置prometheus_retention_time。Prometheus可以通过”<a href="http://consulServerIp:8500/v1/agent/metrics?format=prometheus&quot;来scrape指标。" target="_blank" rel="noopener">http://consulServerIp:8500/v1/agent/metrics?format=prometheus&quot;来scrape指标。</a> 参见<a href="https://www.consul.io/docs/agent/options.html#telemetry" target="_blank" rel="noopener">Consul Telemetry</a></p></blockquote><h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul operator raft list-peers</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Consul </category>
          
      </categories>
      
      
        <tags>
            
            <tag> registry </tag>
            
            <tag> consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul</title>
      <link href="/2019/08/25/consul/consul/"/>
      <url>/2019/08/25/consul/consul/</url>
      
        <content type="html"><![CDATA[<h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><h2 id="Eventually-or-Strongly-Consistent"><a href="#Eventually-or-Strongly-Consistent" class="headerlink" title="Eventually or Strongly Consistent"></a>Eventually or Strongly Consistent</h2><p>Consul has two important subsystems, the <strong>service catalog</strong> and the <strong>gossip protocol</strong>. The service catalog stores all the nodes, service instances, health check data, ACLs, and KV information. It is <strong>strongly consistent</strong>, and replicated using the consensus protocol.</p><p>The <strong>gossip protocol</strong> is used to track which nodes are part of the cluster and to detect a node or agent failure. This information is <strong>eventually consistent</strong> by nature. When the servers detects a change in membership, or receive a health update, they update the service catalog appropriately.</p><p>Because of this split, the answer to the question is subtle. Almost all client APIs interact with the service catalog and are strongly consistent. Updates to the catalog may come via the gossip protocol which is eventually consistent, meaning the current state of the catalog can lag behind until the state is reconciled.<a id="more"></a></p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p><strong>Aent</strong></p><blockquote><p>Agent是一直运行在Consul集群中每个成员上的守护进程。通过运行 consul agent 来启动。Agent可以运行在client或者server模式。指定节点作为client或者server是非常简单的，除非有其他agent实例。所有的agent都能运行DNS或者HTTP接口，并负责运行时检查和保持服务同步。</p></blockquote></li><li><p><strong>Client</strong></p><blockquote><p>Client是将所有rpc转发到server的代理。Client是相对无状态的。Client唯一执行的后台活动是加入LAN gossip pool。这仅有最小的资源开销，并且只消耗少量的网络带宽。</p></blockquote></li><li><p><strong>Server</strong></p><blockquote><p>Server是具有扩展功能的代理，这些功能有：参与Raft选举，维护集群状态，响应RPC查询，与其他数据中心交互WAN gossip，以及转发查询给leader或者远程数据中心。</p></blockquote></li><li><p><strong>Datacenter</strong></p><blockquote><p>虽然数据中心的定义是很明确的，但是有一些微妙细节必须考虑。例如，在EC2中，多个可用区域是否被认为组成一个数据中心？我们定义数据中心为一个私有的，低延迟和高带宽的一个网络环境。这就排除了穿越公共互联网的通信，但是出于我们的目的考虑，一个EC2区域内的多个可用性区域将被视为单个数据中心的一部分。</p></blockquote></li><li><p><strong>Consensus</strong></p><blockquote><p>在Consul的术语中，使用Consensus表明leader选举的一致以及事务顺序的一致性。由于这些事务应用于有限状态机，Consensus的定义意味着复制状态机的一致性。</p></blockquote></li><li><p><strong>Gossip</strong></p><blockquote><p>Consul建立在Serf的基础之上，它提供了一个用于多播目的的完整的gossip协议。Serf提供成员关系、故障检测和事件广播。（主要是通过UDP进行随机点到点的通信）</p></blockquote></li><li><p><strong>LAN Gossip</strong></p><blockquote><p>指LAN gossip pool，包含所有位于同一局域网或数据中心上的节点。 </p></blockquote></li><li><p><strong>WAN Gossip</strong></p><blockquote><p>指WAN gossip pool，只包含servers。这些servers分布在不同的数据中心，通常通过internet或广域网进行通信。 </p></blockquote></li></ul><ul><li><strong>RPC</strong><blockquote><p>远程过程调用。这是一种允许client向server发起request的的请求/响应机制。</p></blockquote></li></ul><h2 id="Gossip-Protocol"><a href="#Gossip-Protocol" class="headerlink" title="Gossip Protocol"></a>Gossip Protocol</h2><h3 id="Gossip-in-Consul"><a href="#Gossip-in-Consul" class="headerlink" title="Gossip in Consul"></a>Gossip in Consul</h3><p>Consul使用了两个gossip pools，LAN和WAN：</p><ul><li><p><strong>LAN pool</strong></p><ul><li>每个数据中心Consul都有一个LAN pool，其中包含数据中心的所有成员：clients和servers。</li><li>Membership information允许客户端自动发现服务器，从而减少了所需的配置量。</li><li>分布式故障检测允许整个集群共同承担故障检测工作，而不是集中在几个服务器上。</li><li>提供可靠和快速的事件广播，如Leader选举。</li></ul></li><li><p><strong>WAN pool</strong></p><ul><li>WAN池全局惟一，无论数据中心如何划分，所有servers(注意没有client)都参与到WAN池中。</li><li>WAN池提供的Membership information允许servers执行跨数据中心请求。</li><li>集成故障检测允许Consul优雅地处理丢失连接的整个数据中心，或者远程数据中心中的单个server。</li></ul></li></ul><h3 id="Health-Check"><a href="#Health-Check" class="headerlink" title="Health Check"></a>Health Check</h3><ul><li><p>Script+ Interval</p></li><li><p>HTTP+ Interval</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;check&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;api&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;HTTPAPI on port 5000&quot;,</span><br><span class="line">    &quot;http&quot;: &quot;http:&#x2F;&#x2F;localhost:5000&#x2F;health&quot;,</span><br><span class="line">    &quot;interval&quot;: &quot;10s&quot;,</span><br><span class="line">    &quot;timeout&quot;: &quot;1s&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------- </span><br><span class="line">&#123;</span><br><span class="line">  &quot;Check&quot;: &#123;</span><br><span class="line">    &quot;Node&quot;: &quot;simple_test&quot;,</span><br><span class="line">    &quot;CheckID&quot;: &quot;service:simple_test1&quot;,</span><br><span class="line">    &quot;Name&quot;: &quot;simple_test1 health check&quot;,</span><br><span class="line">    &quot;Status&quot;: &quot;passing&quot;,</span><br><span class="line">    &quot;ServiceID&quot;: &quot;simple_test1&quot;,</span><br><span class="line">    &quot;Definition&quot;: &#123;</span><br><span class="line">      &quot;HTTP&quot;: &quot;10.255.242.119:9999&quot;,</span><br><span class="line">      &quot;Interval&quot;: &quot;10s&quot;,</span><br><span class="line">      &quot;Timeout&quot;: &quot;5s&quot;,</span><br><span class="line">      &quot;DeregisterCriticalServiceAfter&quot;: &quot;60s&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TCP + Interval</p></li><li><p>Time to Live（TTL）</p></li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --remote-name https://releases.hashicorp.com/consul/1.5.1/consul_1.5.1_linux_amd64.zip</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip consul_1.5.1_linux_amd64.zip</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv consul /usrl/<span class="built_in">local</span>/bin</span><br><span class="line">mkdir /etc/consul.d</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul --version</span><br></pre></td></tr></table></figure></li></ul><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th align="left">Feature</th><th align="center">Consul</th><th align="center">Etcd</th><th align="center">Zookeeper</th><th align="center">Eureka</th></tr></thead><tbody><tr><td align="left"><strong>定位</strong></td><td align="center">注册中心</td><td align="center">KV存储</td><td align="center">分布式协调</td><td align="center">注册中心</td></tr><tr><td align="left"><strong>编写语言</strong></td><td align="center">Go</td><td align="center">Go</td><td align="center">Java</td><td align="center">Java</td></tr><tr><td align="left"><strong>KV存储</strong></td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td><td align="center">-</td></tr><tr><td align="left"><strong>健康检查</strong></td><td align="center">支持</td><td align="center">支持</td><td align="center">-</td><td align="center">支持</td></tr><tr><td align="left"><strong>多数据中心</strong></td><td align="center">支持</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left"><strong>Watch支持</strong></td><td align="center">支持长轮询</td><td align="center">支持长轮询</td><td align="center">支持</td><td align="center">支持长轮询</td></tr><tr><td align="left"><strong>客户端支持</strong></td><td align="center">http/dns</td><td align="center">http/grpc</td><td align="center">client binding</td><td align="center">http/sidecar</td></tr><tr><td align="left"><strong>CAP</strong></td><td align="center">CP</td><td align="center">CP</td><td align="center">CP</td><td align="center">AP</td></tr><tr><td align="left"><strong>安全</strong></td><td align="center">ACL/https</td><td align="center">https</td><td align="center">ACL</td><td align="center">黑名单</td></tr><tr><td align="left"><strong>Github star</strong></td><td align="center">16004</td><td align="center">25022</td><td align="center">6370</td><td align="center">7761</td></tr></tbody></table><h2 id="Cluster-deploy"><a href="#Cluster-deploy" class="headerlink" title="Cluster deploy"></a>Cluster deploy</h2><ul><li><p>Server : server-1  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server -bootstrap-expect=1 -data-dir=/tmp/consul -node=server-1 -<span class="built_in">bind</span>=10.255.242.112  -config-dir=/etc/consul.d -ui -client 0.0.0.0</span><br></pre></td></tr></table></figure></li><li><p>Server : server-2  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server -data-dir=/tmp/consul -node=server-2 -<span class="built_in">bind</span>=10.255.242.113  -config-dir=/etc/consul.d -ui -client 0.0.0.0 -join 10.255.242.112</span><br></pre></td></tr></table></figure></li><li><p>Server : server-3  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server -data-dir=/tmp/consul -node=server-3 -<span class="built_in">bind</span>=10.255.242.114  -config-dir=/etc/consul.d -ui -client 0.0.0.0 -join 10.255.242.112</span><br></pre></td></tr></table></figure></li><li><p>Client : client-1  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -data-dir=/tmp/consul -node=client-1 -<span class="built_in">bind</span>=10.255.242.115 -config-dir=/etc/consul.d -client 0.0.0.0 -join 10.255.242.112</span><br></pre></td></tr></table></figure></li><li><p>Client : client-2  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -data-dir=/tmp/consul -node=client-2 -<span class="built_in">bind</span>=10.255.242.116 -config-dir=/etc/consul.d -client 0.0.0.0 -join 10.255.242.112</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul operator raft list-peers</span><br></pre></td></tr></table></figure><ul><li>Notice </li></ul><p>集群环境搭建时，注意在每个agent的主机上关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Consul </category>
          
      </categories>
      
      
        <tags>
            
            <tag> registry </tag>
            
            <tag> consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMX</title>
      <link href="/2019/08/09/JMX/"/>
      <url>/2019/08/09/JMX/</url>
      
        <content type="html"><![CDATA[<h1 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h1><p><strong>Java Management Extensions</strong></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>JMX是一个为应用植入监控及管理功能的框架；是一套标准的代理和服务。可以在任何Java应用中使用这些代理和服务。<a id="more"></a></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>中间件WebLogic的管理页面就是基于JMX开发的，而JBoss则整个系统都基于JMX构架。</p><p>一个比较形象的关于Java开发的段子：</p><ul><li>菜鸟，系统配置参数写死在程序里，需要改变的时候就去修改代码，然后重新编译发布。</li><li>熟手，系统配置参数写写在配置文件里，需要改变的时候只要修改配置文件，重启应用，以便读取配置文件里最新的值。</li><li>好手，加一层缓存，把系统配置参数缓存起来，系统在获取的时候，先看看配置文件有没有改动，如有改动则重新从配置里读取，否则从缓存里读取。</li><li>高手，利用JMX，使用MBean来管理系统配置参数。</li></ul><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/21D4AF5C94E1499DABF429BC586E2EAE?method=download&shareKey=51fbc67ef0e35eda74e2f90c330dd9f1" alt="image"></p><h3 id="层级结构"><a href="#层级结构" class="headerlink" title="层级结构"></a>层级结构</h3><ul><li><p><strong>设备层（Instrumentation Layer）</strong>- 定义信息模型</p><p>什么是设备？从资源的角度来看，是对抽象资源的描述。比如说如果资源是数据库，管理组件中可以提供数据库的一些描述信息，比如数据库服务地址、端口，类型以及最大连接数等等，但是这些”抽象资源的描述“必须满足JMX规范的要求。</p><p>设备层定义了如何实现JMX管理资源的规范。一个JMX管理资源可以是一个Java应用、一个服务或一个具体设备，它们可以用Java开发，或者至少能用Java进行包装，并且能被置入JMX框架中，从而成为JMX的一个管理构件(Managed  Bean)，简称MBean。</p><blockquote><p>在JMX规范中，MBean定义如下：是一个能代表管理资源的Java对象，遵从一定的设计模式，同时还需实现规范定义的特定的接口。规范保证了所有的管理构件以一种标准的方式来表示被管理资源。 管理接口就是被管理资源暴露出的一些信息，通过对这些信息的修改就能控制被管理资源。一个管理构件的管理接口包括：能被接触的属性值、能够执行的操作、能发出的通知事件以及管理构件的构建器。</p></blockquote><p>MBean有以下几种类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>standard MBean</td><td>这种类型的MBean最简单，它能管理的资源（包括属性，方法，时间）必须定义在接口中，<br>然后MBean必须实现这个接口。它的命名也必须遵循一定的规范，例如我们的MBean为Abc，<br>则接口必须为AbcMBean。</td></tr><tr><td>dynamic MBean</td><td>必须实现javax.management.DynamicMBean接口，所有的属性，方法都在运行时定义。</td></tr><tr><td>model MBean</td><td>…</td></tr><tr><td>MXBean</td><td>实现xxxMXBean接口，或者不按照MXBean结尾来命名，但是需要加上@MXBean的注解，<br>支持各种数据类型，包括自定义类型。其他方法命名规则与MBean类似。</td></tr></tbody></table></li></ul><ul><li><p><strong>代理层（Agent Layer）</strong>- 管理相应资源</p><p>代理层主要定义了各种服务以及通信模型。该层的核心是 MBeanServer和一系列附加的Agent Service，MBean Server其实就是MBean的容器，可以注册Adapter、Connector、MBean并且直接管理MBean。所有的MBean都要向它注册，才能被管理。注册在MBeanServer上的MBean并不直接和远程应用程序进行通信，他们通过协议适配器（Adapter）和连接器（Connector）进行通信。通常Agent由一个MBeanServer和多个系统服务组成。</p><blockquote><p>代理层提供了4个Agent 服务：计时器（Timer）、监控（monitoring）、动态加载MBean（dynamic MBean loading ）、关系服务（relationship services ）</p></blockquote></li></ul><ul><li><p><strong>分布层（Distributed Layer）</strong>- 适配接口</p><p>分布层定义了一系列用来访问Agent的接口和组件，包括Adapter和Connector的描述。通过交互组件与JMX Agents建立连接后，用户可以用管理工具来和注册在Agents中的MBeans进行交互。</p></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>JMX相关的API主要在以下两处：</p><ul><li><p>java.lang.management.*</p></li><li><p>javax.management.*</p></li></ul><h2 id="JMX代码示例"><a href="#JMX代码示例" class="headerlink" title="JMX代码示例"></a>JMX代码示例</h2><ul><li>standard MBean示例</li></ul><ol><li>定义一个MBean接口，<strong>接口的命名规范为:具体的实现类为前缀+MBean</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义一个实现类，实现上述的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 该类名称必须与实现的接口的前缀保持一致（即MBean前面的名称)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">PersonMBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"Jack"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String age = <span class="string">"18"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello! "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get name : "</span>+ name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set name : "</span>+ name);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get age : "</span>+ age);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set age : "</span>+ age);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义agent层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAgent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//通过工厂类获取MBeanServer，用来做MBean的容器</span></span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        <span class="comment">//ObjectName中的取名是有一定规范的，格式为：“域名:name=MBean名称”，其中域名和MBean的名称可以任意取。这样定义后，就可以唯一标识我们定义的这个MBean的实现类了。</span></span><br><span class="line">        ObjectName objName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//创建并注册mbean</span></span><br><span class="line">        server.registerMBean(<span class="keyword">new</span> Person(), objName);</span><br><span class="line">        System.out.println(<span class="string">"Agent start"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过JMX提供的工具页访问管理MBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.adaptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> com.sun.jdmk.comm.HtmlAdaptorServer;</span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAgent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        ObjectName objName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//创建并注册MBean</span></span><br><span class="line">        server.registerMBean(<span class="keyword">new</span> Person(), objName);</span><br><span class="line">        <span class="comment">//创建HtmlAdaptorServer</span></span><br><span class="line">        ObjectName adapterName = <span class="keyword">new</span> ObjectName(<span class="string">"PersonAgent:name=Htmladapter,port=8082"</span>);</span><br><span class="line">        HtmlAdaptorServer adapter = <span class="keyword">new</span> HtmlAdaptorServer();</span><br><span class="line">        server.registerMBean(adapter, adapterName);</span><br><span class="line">        adapter.start();</span><br><span class="line">        System.out.println(<span class="string">"HtmlAdaptorServer start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：由于引入了com.sun.jdmk.comm.HtmlAdaptorServer，所以需要在pom.xml中设置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jdmk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmxtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过 <a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a> 可以访问管理配置页面</p><ul><li>通过client端进行远程访问</li></ul><ol><li>对Agent进行修改，增加JMXConnectorServer的监听</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnectorServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnectorServerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAgent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        ObjectName objName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//create mbean and register mbean</span></span><br><span class="line">        server.registerMBean(<span class="keyword">new</span> Person(), objName);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//注册一个端口，绑定url后用于客户端通过rmi方式连接JMXConnectorServer</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//URL路径的结尾可以随意指定，但如果需要用Jconsole来进行连接，则必须使用jmxrmi</span></span><br><span class="line">            JMXServiceURL url = <span class="keyword">new</span> JMXServiceURL(<span class="string">"service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi"</span>);</span><br><span class="line">            JMXConnectorServer jcs = JMXConnectorServerFactory.newJMXConnectorServer(url, <span class="keyword">null</span>, server);</span><br><span class="line">            jcs.start();</span><br><span class="line">            System.out.println(<span class="string">"Agent start"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RemoteException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>客户端Client程序，用于与Agent进行远程连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.PersonMBean;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.management.Attribute;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServerConnection;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServerInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnector;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnectorFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, Exception, NullPointerException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JMXServiceURL url = <span class="keyword">new</span> JMXServiceURL(<span class="string">"service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi"</span>);</span><br><span class="line">        JMXConnector jmxc = JMXConnectorFactory.connect(url,<span class="keyword">null</span>);</span><br><span class="line">        MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();</span><br><span class="line">        System.out.println(<span class="string">"Domains ......"</span>);</span><br><span class="line">        String[] domains = mbsc.getDomains();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;domains.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"doumain["</span> + i + <span class="string">"]="</span> + domains[i] );</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"MBean count = "</span> + mbsc.getMBeanCount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ObjectName的名称与注册时候的保持一致</span></span><br><span class="line">        ObjectName mbeanName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//设置指定Mbean的特定属性值</span></span><br><span class="line">        <span class="comment">//这里的setAttribute、getAttribute操作只能针对bean的属性</span></span><br><span class="line">        <span class="comment">//例如对getName或者setName进行操作，只能使用Name，需要去除方法的前缀</span></span><br><span class="line">        String age = (String)mbsc.getAttribute(mbeanName, <span class="string">"Age"</span>);</span><br><span class="line">        String name = (String)mbsc.getAttribute(mbeanName, <span class="string">"Name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"age="</span> + age + <span class="string">";name="</span> + name);</span><br><span class="line"></span><br><span class="line">        mbsc.setAttribute(mbeanName, <span class="keyword">new</span> Attribute(<span class="string">"Name"</span>,<span class="string">"Clark"</span>));</span><br><span class="line">        mbsc.setAttribute(mbeanName, <span class="keyword">new</span> Attribute(<span class="string">"Age"</span>,<span class="string">"22"</span>));</span><br><span class="line"></span><br><span class="line">        PersonMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbsc, mbeanName, PersonMBean<span class="class">.<span class="keyword">class</span>, <span class="title">false</span>)</span>;</span><br><span class="line">        proxy.sayHello();</span><br><span class="line">        proxy.sayHello(<span class="string">"Rose"</span>);</span><br><span class="line">        <span class="comment">//invoke调用bean的方法，只针对非设置属性的方法</span></span><br><span class="line">        <span class="comment">//例如invoke不能对getName方法进行调用</span></span><br><span class="line">        mbsc.invoke(mbeanName, <span class="string">"sayHello"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"I'll connect to JMX Server via client"</span>&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">"java.lang.String"</span>&#125;);</span><br><span class="line">        mbsc.invoke(mbeanName, <span class="string">"sayHello"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Notification - MBean之间的通信</li></ul><p>JMX 的通知由四部分组成：</p><p>a) Notification这个相当于一个信息包，封装了需要传递的信息</p><p>b) Notification broadcaster这个相当于一个广播器，把消息广播出</p><p>c) Notification listener 这是一个监听器，用于监听广播出来的通知信息</p><p>d) Notification filiter 这个一个过滤器，过滤掉不需要的通知。这个一般很少使用</p><ol><li>新创建一个资源ManMBean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">ManMBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义实现类</li></ol><blockquote><p>注意Man还继承了NotificationBroadcasterSupport，在sayHi方法里创建并发送了一个消息包。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.Notification;</span><br><span class="line"><span class="keyword">import</span> javax.management.NotificationBroadcasterSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">NotificationBroadcasterSupport</span> <span class="keyword">implements</span> <span class="title">ManMBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个信息包 格式：通知名称，发起者，序列号，发起通知时间，发送的消息</span></span><br><span class="line">        Notification notify = <span class="keyword">new</span> Notification(<span class="string">"Man.sayHi"</span>,<span class="keyword">this</span>,++seq,System.currentTimeMillis(),name);</span><br><span class="line">        <span class="comment">//发送通知</span></span><br><span class="line">        sendNotification(notify);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>设置监听器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"><span class="keyword">import</span> javax.management.Notification;</span><br><span class="line"><span class="keyword">import</span> javax.management.NotificationListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonListener</span> <span class="keyword">implements</span> <span class="title">NotificationListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNotification</span><span class="params">(Notification notification, Object handback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(handback <span class="keyword">instanceof</span> Person)</span><br><span class="line">        &#123;</span><br><span class="line">            Person person = (Person)handback;</span><br><span class="line">            person.sayHello(notification.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Agent</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        ObjectName objectName = <span class="keyword">new</span> ObjectName(<span class="string">"Rose:name=Person"</span>);</span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        server.registerMBean(person, objectName);</span><br><span class="line">        Man man = <span class="keyword">new</span> Man();</span><br><span class="line">        server.registerMBean(man, <span class="keyword">new</span> ObjectName(<span class="string">"Jack:name=Man"</span>));</span><br><span class="line">        <span class="comment">//绑定notification监听器</span></span><br><span class="line">        man.addNotificationListener(<span class="keyword">new</span> PersonListener(), <span class="keyword">null</span>, person);</span><br><span class="line">        System.out.println(<span class="string">"Agent start"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JMX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus exporter开发说明</title>
      <link href="/2019/02/14/Prometheus/"/>
      <url>/2019/02/14/Prometheus/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Prometheus将所有采集到的样本数据以时间序列（time series）的方式保存在内存中，并且定时持久化到硬盘上。<a id="more"></a></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="Time-Series"><a href="#Time-Series" class="headerlink" title="Time Series"></a>Time Series</h3><p>每条time series通过指标名称(metric name)和一组标签集(label set)唯一确定。通常以这样的形式表现：</p><p><strong>&lt;metric name&gt;{&lt;label name&gt;=&lt;label value&gt;, …}</strong></p><p>如下所示，可以将time series理解为一个以时间为横轴的二维矩阵。矩阵中，在time series中的每一个点称为一个样本sample。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|</span><br><span class="line">| . . . . . . . . . . . . . . . . &lt;metric name&gt;&#123;&lt;label name&gt;&#x3D;&lt;label value&gt;, ...&#125; </span><br><span class="line">| . . . . . . . . . . . . . . . . http_requests_total&#123;code&#x3D;&quot;200&quot;, method&#x3D;&quot;GET&quot;&#125;</span><br><span class="line">| . . . . . . . . . . . . . . . . http_requests_total&#123;code&#x3D;&quot;200&quot;, method&#x3D;&quot;POST&quot;&#125;</span><br><span class="line">| . . . . . . . . . . . . . . . . http_requests_total&#123;code&#x3D;&quot;404&quot;, method&#x3D;&quot;GET&quot;&#125;</span><br><span class="line">|</span><br><span class="line">&lt;-------------- 时间 --------------&gt;</span><br></pre></td></tr></table></figure><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p>有序的sample组成了实际的time series数据。每个sample包括：</p><ul><li><p>样本值(value)： 一个float64的浮点型数据表示当前样本的值。</p></li><li><p>时间戳(timestamp)：一个精确到毫秒的时间戳。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;-- Metric name --&gt;&lt;--------- Labels ---------&gt;&lt;-- Timestamp --&gt;&lt;- Value -&gt;</span><br><span class="line">http_requests_total&#123;status&#x3D;&quot;200&quot;, method&#x3D;&quot;GET&quot;&#125; @1551324098.067   358007</span><br><span class="line">http_requests_total&#123;status&#x3D;&quot;200&quot;, method&#x3D;&quot;GET&quot;&#125; @1551324158.067   358012</span><br></pre></td></tr></table></figure><h3 id="Metric-Name"><a href="#Metric-Name" class="headerlink" title="Metric Name"></a>Metric Name</h3><p>Metric name反映监控样本的基本含义或特性。比如，http_requests_total - 表示当前系统接收到的HTTP请求总量。</p><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>Label体现当前样本的特征维度。相同的metric name，通过不同label集的结合,会形成特定的time series维度化实例。</p><p>比如：http_requests_total{ code=”200”, method=”GET” } 表示当前系统接收到的应答码为200的http get请求总量。</p><p>通过这些维度Prometheus可以对样本数据进行过滤以及聚合等处理。</p><h2 id="Metric类型"><a href="#Metric类型" class="headerlink" title="Metric类型"></a>Metric类型</h2><p>Prometheus定义了4种指标类型(metric type)：</p><p>Counter（计数器）</p><p>Gauge（仪表盘）</p><p>Histogram（直方图）</p><p>Summary（摘要）</p><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p><strong>Counter</strong>是一个累计度量指标，其工作方式和计数器一样，只增不减（除非系统重启counter重置）。</p><p>Counter 常用于统计服务的请求数、任务完成数和错误出现的次数等等。一般在定义counter类型指标的名称时推荐使用_total作为后缀。</p><p>例如：http_requests_total</p><h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><p><strong>Gauge</strong>侧重于反应系统的当前状态，这类指标的样本数据可增可减。</p><p>gauge常用于测量值，如温度、当前系统内存使用率以及并发请求数等等。</p><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><p>除了以上counter和gauge这两种简单的metric类型外。Prometheus还定义了两种较为复杂的metric类型：histogram和summary。</p><p>在监控的场景中，我们一般使用某些指标的平均值，例如CPU的平均使用率、页面的平均响应时间。</p><p>这种方式通常也会存在一些问题，以系统API调用的平均响应时间为例：如果大多数API请求都维持在100ms的响应时间范围内，个别请求的响应时间需要5s，那么计算响应的平均时间话会和实际情况有较大的差距，这种情况被称为长尾问题。</p><p>解决这个问题最简单的方式，就是按照请求延迟的范围进行分组。例如，统计延迟在各时延区间段（0~20ms,20~50ms,50~100ms, 100~200ms,…）的请求数有多少。</p><p>通过这种方式可以快速分析系统慢的原因。</p><p><strong>Histogram和Summary主要用于统计和分析样本的分布情况</strong>。通过这种类型的监控指标，我们可以快速了解监控样本的分布情况。</p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p><strong>Histogram</strong>对观测对象进行采样(通常是请求持续时间或响应大小)，对可配置范围内（buckets）的事件分布进行统计，同时还会统计所有监测值总和。</p><p>一个以 <strong>xxx</strong> 为基础指标名称的histogram指标包含三种时间序列：</p><ul><li><p><strong>xxx_bucket{le=”&lt;upper inclusive bound（上限包含边界）&gt;”}</strong>  <em>各区间范围内（包含上限边界），观测事件数目的统计</em></p></li><li><p><strong>xxx_sum</strong>  <em>所有观测值的总和</em></p></li><li><p><strong>xxx_count</strong>  <em>所有观测事件的总数，与xxx_bucket{le=”+Inf”}的值相同</em></p></li></ul><p><strong>Example：</strong></p><p>通过Prometheus自身提供的metrics接口，能看到类型为histogram的相关指标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># HELP prometheus_tsdb_compaction_duration_seconds Duration of compaction runs</span><br><span class="line"># TYPE prometheus_tsdb_compaction_duration_seconds histogram</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;1&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;2&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;4&quot;&#125; 105</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;8&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;16&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;32&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;64&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;128&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;256&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;512&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;+Inf&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_sum 416.511</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_count 117</span><br></pre></td></tr></table></figure><p>以上是prometheus时序数据库进行压缩操作耗时的一个分布统计情况。</p><p><strong>prometheus_tsdb_compaction_duration_seconds_count 117</strong>  <em>表示Prometheus时序数据库进行压缩操作的总次数为117</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_sum 416.511</strong>  <em>表示Prometheus时序数据库进行压缩操作总耗时416.511秒</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_bucket{le=”1”} 0</strong>  <em>表示压缩操作耗时在1秒及以内的次数为0</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_bucket{le=”4”} 105</strong>  <em>表示压缩操作耗时在4秒及以内的次数为105</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_bucket{le=”8”} 117</strong>  <em>表示压缩操作耗时在8秒及以内的次数为117</em></p><p>…</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><strong>Summary</strong>是采样点分位图统计，和histogram非常相似，通常针对的场景也是请求持续时间或响应大小。</p><p>Summary也提供对于事件的计数xxx_count以及值的汇总xxx_sum，同时还计算滑动时间窗口上的可配置分位数。</p><p><strong>分位数：</strong></p><blockquote><p>N个数按值排序，排第N&#42;φ（0 ≤ φ ≤ 1）位的数即为φ-分位数<br>φ分位数的示例：0.5分位数称为中位数。0.95分位数是第95百分位数</p></blockquote><p>一个以 <strong>xxx</strong> 为基础metric name的summary指标包含三种时间序列：</p><ul><li><p><strong>xxx {quantile=”&lt;φ&gt;”}</strong>  <em>分位数为φ（0 ≤ φ ≤ 1）的观测值</em></p></li><li><p><strong>xxx_sum</strong>  <em>所有观测值的总和</em></p></li><li><p><strong>xxx_count</strong>  <em>所有观测事件的总数</em></p></li></ul><p><strong>Example：</strong></p><p>通过Prometheus自身提供的metrics接口，能看到类型为Summary的相关指标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.</span><br><span class="line"># TYPE prometheus_tsdb_wal_fsync_duration_seconds nn</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds&#123;quantile&#x3D;&quot;0.5&quot;&#125; 0.013472843</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds&#123;quantile&#x3D;&quot;0.9&quot;&#125; 0.018071257</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds&#123;quantile&#x3D;&quot;0.99&quot;&#125; 0.022201</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds_sum 55.154448234000085</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds_count 4230</span><br></pre></td></tr></table></figure><p>以上是prometheus时序数据库进行WAL同步作耗时的一个统计情况。</p><p><strong>prometheus_tsdb_wal_fsync_duration_seconds_count 4230</strong>  <em>表示Prometheus进行WAL同步操作的总次数为4230</em></p><p><strong>prometheus_tsdb_wal_fsync_duration_seconds_sum 55.154</strong>  <em>表示Prometheus进行WAL同步操作的总耗时为55.154秒</em></p><p><strong>prometheus_tsdb_wal_fsync_duration_seconds{quantile=”0.5”} 0.013</strong>  <em>进行WAL同步操作耗时的中位数为0.013秒</em></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>Histogram和Summary都可以计算和统计样本的分布情况。只不过两者的统计分布的方式有些区别，Histogram统计<strong>buckets区间</strong>内的分布数，而Summary是按<strong>分位数</strong>进行统计。</p><p>针对Histogram，Prometheus提供了histogram_quantile()函数来计算分位数。</p><p><strong>Example：</strong></p><p>继续使用上面的histogram的例子，如果我们需要计算过去1天内Prometheus进行tsdb压缩操作耗时的第90个百分位数，我们可以用以下的方法：</p><p><strong>histogram_quantile(0.9,rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d])) 3.9125</strong></p><p><em>使用rate()函数指定分位数计算的时间窗口“过去1天内”</em></p><p><strong>两种metric类型的一些区别：</strong></p><table><thead><tr><th><strong>对比项</strong></th><th><strong>Histogram</strong></th><th><strong>Summary</strong></th></tr></thead><tbody><tr><td>需要的配置</td><td>选择适合于预期观测值范围的bucket</td><td>选择所需的φ分位数和滑动窗口，但后续其他φ分位数和滑动窗口无法计算</td></tr><tr><td>客户端表现</td><td>客户端实现非常简单，只需要累计</td><td>由于流式的分位数计算，客户端实现所需的成本比较高</td></tr><tr><td>服务端表现</td><td>服务端需要实现计算分位数（如果特别计算花费的时间太长，可以用规则记录）</td><td>服务端所需成本低</td></tr><tr><td>time series （除_sum和_count外）</td><td>每个配置bucket一个时间序列</td><td>每个配置分位数一个时间序列</td></tr><tr><td>φ分位数和滑动时间窗的设置</td><td>可通过Prometheus的表达式进行设置</td><td>由客户预先配置</td></tr><tr><td>聚合</td><td>可通过Prometheus的表达式进行设置</td><td>通常不可聚合</td></tr></tbody></table><p><strong>通过以上对比，我们建议对于分布情况的统计，采用histogram的metric类型</strong></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="Counter-1"><a href="#Counter-1" class="headerlink" title="Counter"></a>Counter</h3><p>Counter是一个简单且很强大的指标类型，使用counter类型指标记录某些事件发生的次数，通过Prometheus内置的聚合操作和函数，可以轻松的了解该事件产生速率的变化以及其他信息。</p><p>例如：</p><ul><li><p>通过rate()函数获取HTTP请求在过去5分钟内的增长率：  <strong>rate(http_requests_total[5m])</strong></p></li><li><p>通过聚合操作符topk，获取HTTP访问量前10的URL地址：  <strong>topk(10, http_requests_total)</strong></p></li></ul><h3 id="Gauge-1"><a href="#Gauge-1" class="headerlink" title="Gauge"></a>Gauge</h3><p>Gauge类型的指标是使用率最高的，所表示的内容是最直接的，几乎不用通过任何的表达式处理。通过Gauge指标，可以很清楚了解某个系统属性的当前状态，比如：节点内存剩余字节数node_memory_MemFree，open file descriptors数目process_max_fds 等等。</p><p>Gauge还有一个比较特殊的用法，结合label集，可以表示一些info信息，如：</p><p><em>prometheus_build_info{branch=”HEAD”,goversion=”go1.10”,revision=”bc6058c81272a8d938c05e75607371284236aadc”,version=”2.2.1”} 1</em></p><h3 id="Histogram-1"><a href="#Histogram-1" class="headerlink" title="Histogram"></a>Histogram</h3><p>Histogram非常适合观测“durations”以及“sizes”这类的指标。通过Histogram类型的指标，可以计算平均值、SLA以及分位数（分布情况）。</p><p>还是以上面的prometheus_tsdb_compaction_duration_seconds指标为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># HELP prometheus_tsdb_compaction_duration_seconds Duration of compaction runs</span><br><span class="line"># TYPE prometheus_tsdb_compaction_duration_seconds histogram</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;1&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;2&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;4&quot;&#125; 105</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;8&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;16&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;32&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;64&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;128&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;256&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;512&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;+Inf&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_sum 416.511020335</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_count 117</span><br></pre></td></tr></table></figure><p><strong>1. 平均值</strong></p><p>计算过去1d内的tsdb压缩操作平均时长：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rate(prometheus_tsdb_compaction_duration_seconds_sum[1d]) </span><br><span class="line">&#x2F; </span><br><span class="line">rate(prometheus_tsdb_compaction_duration_seconds_count[1d])</span><br></pre></td></tr></table></figure><p>在Prometheus中执行以上PromQL后可以计算得到平均耗时为3.5秒</p><p><strong>2. SLA</strong></p><p>SLA告警，假设系统要求是：90％的压缩操作耗时需要在4s内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum(rate(prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;4&quot;&#125;[1d])) by (job) </span><br><span class="line">&#x2F; </span><br><span class="line">sum(rate(prometheus_tsdb_compaction_duration_seconds_count[1d])) by (job)</span><br></pre></td></tr></table></figure><p>在Prometheus中执行以上PromQL后可以得到结果为0.94，说明94%的压缩耗时是在4s秒内，如果计算结果低于0.9，那么可以设置触发告警。</p><p><strong>3. 分位数</strong></p><p>通过Prometheus的histogram_quantile()方法进行分布情况统计：histogram_quantile(φ float, b instant-vector)从buckets b中, 计算φ-分位数（0≤φ≤1）</p><p>计算第90个百分位数，也即：过去1天内90%的压缩耗时在多少秒以内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9,rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d]))</span><br></pre></td></tr></table></figure><p>在Prometheus中执行以上PromQL后可以得到结果为3.9，说明90%的压缩操作能在3.9秒以内完成，如果需要计算其他的分位数，可以直接修改φ参数值。</p><p>假如还需要聚合，可以进行如下的计算：</p><p>a) 针对job标签进行分组聚合计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9,sum(rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d])) by (job,le))</span><br></pre></td></tr></table></figure><p>b) 全部聚合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9,sum(rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d])) by (le))</span><br></pre></td></tr></table></figure><p><em>注意：le标签是必需的，所以聚合所有的例子中，需要保留le</em></p><p><strong>4. 其他</strong></p><p>Apdex score应用性能指数计算，用户对应用性能满意度的量化值，其计算公式如下：</p><blockquote><p>Apdex score = (满意样本 + 容忍样本/2) / 样本总数 </p></blockquote><p>在本例中，假设“满意样本”：http请求时长≤0.3s，“容忍样本”：0.3s≤http请求时长≤1.2s（一般不超过满意样本的4倍）。</p><p>如下表达式为计算过去5分钟内，各job下http请求时长的Apdex分数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(sum(rate(http_request_duration_seconds_bucket&#123;le&#x3D;&quot;0.3&quot;&#125;[5m])) by (job) </span><br><span class="line"> + </span><br><span class="line"> sum(rate(http_request_duration_seconds_bucket&#123;le&#x3D;&quot;1.2&quot;&#125;[5m])) by (job))</span><br><span class="line"> &#x2F; 2 &#x2F; sum(rate(http_request_duration_seconds_count[5m])) by (job)</span><br></pre></td></tr></table></figure><p><em>注意：le=1.2的buckets中包含了le=0.3的bucket，所以满意样本数也要除以2。</em></p><h1 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h1><h2 id="命名要求"><a href="#命名要求" class="headerlink" title="命名要求"></a>命名要求</h2><h3 id="指标-Metric"><a href="#指标-Metric" class="headerlink" title="指标(Metric)"></a>指标(Metric)</h3><ol><li><p>Metric name只能由ASCII字符、数字、下划线以及冒号组成，并且必须符合正则表达式：[a-zA-Z_:][a-zA-Z0-9_:]&#42; </p></li><li><p>要有与所属metric域相关的前缀，这个前缀在client中被称为namespace。例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prometheus_notifications_total （特定于Prometheus）</span><br><span class="line">http_request_duration_seconds （针对于所有HTTP请求）</span><br></pre></td></tr></table></figure></li><li><p>对于需要指明样本值单位的，必须要有一个复数形式的基本单位后缀，例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http_request_duration_seconds （单位为seconds） </span><br><span class="line">node_memory_usage_bytes （单位为bytes） </span><br><span class="line">http_requests_total （无单位的累计计数）</span><br><span class="line">process_cpu_seconds_total （单位为seconds的累积计数）</span><br></pre></td></tr></table></figure></li><li><p>应该与所有标签维度上测量的内容表示同样的逻辑。</p></li></ol><h3 id="标签-Label"><a href="#标签-Label" class="headerlink" title="标签(Label)"></a>标签(Label)</h3><ol><li><p>Label name只能由ASCII字符、数字以及下划线组成，并且必须符合正则表达式：[a-zA-Z_][a-zA-Z0-9_]&#42;</p></li><li><p>能区分正在观测的对象的特征。例如：api_request_duration_seconds - 区分请求阶段： stage=”extract|transform|load”</p></li><li><p>避免使用过于通用的标签名，比如“type”；避免使用可能与目标的标签发生冲突的标签名，比如：“service”、“env”。</p></li><li><p>不要使用Prometheus专有的特殊含义标签，比如“le”、“quantile”。</p></li><li><p>不要将label name放在metric name中，这样会引起冗余，如果聚合了相应的label，会引起混淆。</p></li><li><p>不要使用标签来存储具有高基数（大量不同标签值）的维度，例如用户ID、邮箱地址等无限制的值集。因为标签键值对的每个组合，都会代表一个新的时间序列。</p></li></ol><h2 id="实践参考"><a href="#实践参考" class="headerlink" title="实践参考"></a>实践参考</h2><h3 id="Four-Golden-Signals"><a href="#Four-Golden-Signals" class="headerlink" title="Four Golden Signals"></a>Four Golden Signals</h3><p><strong>Four Golden Signals</strong>是Google针对大量分布式监控的经验总结，可以在服务级别帮助衡量终端用户体验、服务中断、业务影响等层面的问题。主要关注与以下四种类型的指标：<strong>延迟</strong>，<strong>流量</strong>，<strong>错误</strong>以及<strong>饱和度</strong>。</p><p><strong>延迟</strong>：记录用户请求所需的时间，重点是要区分成功请求的延迟时间和失败请求的延迟时间。</p><p><strong>流量</strong>：流量对于不同类型的系统而言可能代表不同的含义。例如，在HTTP REST API中,流量通常是每秒HTTP请求数。监控当前系统的流量，可以衡量服务的容量需求。</p><p><strong>错误</strong>：监测系统所有发生的错误请求，衡量错误率。对于失败而言有些是显式的(比如,HTTP 500错误)，而有些是隐式(比如，HTTP响应200，但实际业务流程中有错误的)。</p><p><strong>饱和度</strong>：衡量系统服务的饱和度。主要关注最影响服务状态的受限资源。例如，系统主要受内存影响，那就主要关注内存状态，如果系统受限于磁盘I/O，那就主要观测磁盘I/O的状态。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>出于监控的考虑，服务通常可以分为三种类型：在线服务，离线处理和批量作业。</p><p><strong>在线服务</strong>，此类系统中的关键指标是处理的请求数，错误数和延迟。正在进行的请求数也非常有用。</p><p><strong>离线处理</strong>，此类系统中通常有多个处理阶段，关键的指标是各阶段正在进行的项目数以及最近一次处理的项目数。</p><p><strong>批量作业</strong>和离线处理之间的界限很模糊，因为离线处理常常在批量作业中完成。批量作业的关键指标是执行的批次，作业每个主要阶段耗费的时间，总体运行时间，最后一次（成功或失败）的时间，这些都是gauge类型的指标。因为批量的显著特征就是不会连续的运行，这使得难以进行监测采样提取，所以建议将所有的指标都push到<strong>PushGateway</strong>。</p><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><p><strong>线程池</strong>：对于任何类型的线程池，关键指标是排队请求的数量，正在使用的线程数，线程总数，处理的任务数以及它们花费的时间。队列中等待的时间也很有用。</p><p><strong>高速缓存</strong>：缓存的关键指标是总查询，命中，总体延迟，然后是缓存所在的在线服务系统的查询计数，错误和延迟。</p><h1 id="Exporter"><a href="#Exporter" class="headerlink" title="Exporter"></a>Exporter</h1><p>广义上讲，所有可以向Prometheus提供监控样本数据的服务都可以被称为一个Exporter。在Prometheus中，exporter的一个实例称为target。Prometheus通过轮询的方式定期从这些target中拉取样本数据。</p><p>Prometheus社区提供了丰富的Exporter实现，涵盖了从基础设施，中间件以及网络等各个方面的监控功能。这些Exporter可以实现大部分通用的监控需求。</p><p>用户还可以基于Prometheus提供的Client Library创建自己的Exporter程序，目前Prometheus社区官方提供了对以下编程语言的支持：Go、Java/Scala、Python、Ruby。同时还有第三方提供了一些非官方的客户端libraries。</p><h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><h3 id="独立运行"><a href="#独立运行" class="headerlink" title="独立运行"></a>独立运行</h3><p>以Node Exporter为例，由于无法直接从操作系统层面上提供对Prometheus的支持，所以需要运行独立运行一个的服务，通过操作系统提供的相关接口，将系统的运行状态数据转换为可供Prometheus拉取的监控数据。这些Exporter承担一个中间代理的角色。</p><h3 id="集成服务"><a href="#集成服务" class="headerlink" title="集成服务"></a>集成服务</h3><p>很多开源项目如Kubernetes，ETCD等直接在代码中使用了Prometheus的Client<br>Library，提供了对Prometheus的直接支持。这种方式让应用服务直接将内部的运行状态暴露给Prometheus，可以更好的监控系统的内部运行状态，比较适合需要更多自定义监控指标需求的项目。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><table><thead><tr><th><strong>Aspect</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><strong>Transmission</strong></td><td>HTTP</td></tr><tr><td><strong>Encoding</strong></td><td>UTF-8, \n line endings</td></tr><tr><td><strong>HTTP Content-Type</strong></td><td>text/plain; version=0.0.4 version用于指定Text-based的格式版本，当没有指定版本的时候，默认使用最新格式规范的版本。</td></tr><tr><td><strong>Optional HTTP Content-Encoding</strong></td><td>gzip</td></tr></tbody></table><h3 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h3><p>Exporter需要按照Prometheus的规范，返回监控的样本数据。以Prometheus为例，当访问/metrics地址时会返回以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.</span><br><span class="line"># TYPE process_cpu_seconds_total counter</span><br><span class="line">process_cpu_seconds_total 39531.35</span><br><span class="line"># HELP process_max_fds Maximum number of open file descriptors.</span><br><span class="line"># TYPE process_max_fds gauge</span><br><span class="line">process_max_fds 65536</span><br></pre></td></tr></table></figure><p>主要由三个部分组成：</p><p><strong>帮助信息（HELP）</strong>,格式：<strong><em>&#35; HELP &lt;metrics_name&gt; &lt;doc_string&gt;</em></strong></p><p><strong>类型信息（TYPE）</strong>,格式：<strong><em>&#35; TYPE &lt;metrics_name&gt; &lt;metrics_type&gt;</em></strong> 如果没有明确的指标类型需要指定为untyped</p><p><strong>样本信息（sample）</strong>,每一行样本需要满足以下格式规范：</p><p><strong><em>metric_name</em></strong> <strong>[</strong>“{“ <strong><em>label_name</em></strong> “=” `“` <strong><em>label_value</em></strong> `“` <strong>{</strong> “,” <strong><em>label_name</em></strong> “=” `“` <strong><em>label_value</em></strong> `“` <strong>}</strong> <strong>[</strong> “,” <strong>]</strong> “}” <strong>]</strong> <strong><em>Value</em></strong> <strong>[</strong> <strong><em>Timestamp</em></strong> <strong>]</strong></p><p><strong>[ ]</strong> : 表示可以选</p><p><strong>{ }</strong> : 表示可重复0到多次</p><p><strong><em>Value</em></strong> 为float64型的数据，此外，Nan, +Inf 和 –Inf也是有效值，分表代表非数字，正无穷和负无穷。</p><p><strong><em>Timestamp</em></strong> 为int64型的数据，从1970-01-01 00:00:00以来的毫秒数。如果不填，则默认为当前时间。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="Client-go"><a href="#Client-go" class="headerlink" title="Client_go"></a>Client_go</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>需要prometheus, promauto以及 promhttp这三个库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com&#x2F;prometheus&#x2F;client_golang&#x2F;prometheus</span><br><span class="line">go get github.com&#x2F;prometheus&#x2F;client_golang&#x2F;prometheus&#x2F;promauto</span><br><span class="line">go get github.com&#x2F;prometheus&#x2F;client_golang&#x2F;prometheus&#x2F;promhttp</span><br></pre></td></tr></table></figure><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><p>要暴露Prometheus的指标，需要提供“/metrics” 的HTTP端点。可以使用promhttp库的HTTP Handler来处理。</p><p>下面的例子，就是通过<a href="http://localhost:8080/metrics" target="_blank" rel="noopener">http://localhost:8080/metrics</a>的方式暴露服务的默认指标：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"net/http"</span></span><br><span class="line">   <span class="string">"github.com/prometheus/client_golang/prometheus/promhttp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   http.Handle(<span class="string">"/metrics"</span>, promhttp.Handler())</span><br><span class="line">   http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据业务需求，还可以注册自定义指标，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"log"</span></span><br><span class="line">   <span class="string">"net/http"</span></span><br><span class="line">   <span class="string">"github.com/prometheus/client_golang/prometheus"</span></span><br><span class="line">   <span class="string">"github.com/prometheus/client_golang/prometheus/promhttp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   <span class="comment">//counter</span></span><br><span class="line">   counter = prometheus.NewCounter(prometheus.CounterOpts&#123;</span><br><span class="line">      <span class="comment">//完整的Metric名称 = Namespace+"_"+Subsystem+"_"+Name</span></span><br><span class="line">      <span class="comment">//Name强制要求填写</span></span><br><span class="line">      Namespace: <span class="string">"dangdang"</span>,</span><br><span class="line">      Subsystem: <span class="string">"arch"</span>,</span><br><span class="line">      Name: <span class="string">"http_requests_total"</span>,</span><br><span class="line">      Help: <span class="string">"The total number of http request"</span>,</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//counter vector</span></span><br><span class="line">   <span class="comment">//counter的集合，一组有同样名称、描述，但通过不同标签划分的counter型指标</span></span><br><span class="line">   <span class="comment">//例如: http_requests_total&#123;code="200",method="get"&#125;</span></span><br><span class="line">   counterVec = prometheus.NewCounterVec(</span><br><span class="line">      prometheus.CounterOpts&#123;</span><br><span class="line">         Name: <span class="string">"http_requests_total"</span>,</span><br><span class="line">         Help: <span class="string">"How many HTTP requests processed, partitioned by status code and HTTP method."</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      []<span class="keyword">string</span>&#123;<span class="string">"code"</span>,<span class="string">"method"</span>&#125;,</span><br><span class="line">   )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 指标需要注册，Metrics have to be registered to be exposed</span></span><br><span class="line">   prometheus.MustRegister(counter)</span><br><span class="line">   prometheus.MustRegister(counterVec)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//counter</span></span><br><span class="line">   counter.Add(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//counter vector</span></span><br><span class="line">   counterVec.With(prometheus.Labels&#123;<span class="string">"code"</span>:<span class="string">"200"</span>, <span class="string">"method"</span>:<span class="string">"post"</span>&#125;).Add(<span class="number">300</span>)</span><br><span class="line">   counterVec.With(prometheus.Labels&#123;<span class="string">"code"</span>:<span class="string">"400"</span>, <span class="string">"method"</span>:<span class="string">"get"</span>&#125;).Add(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果对metrics需要很频繁的访问，最好获取一次metrics，并且保留其句柄</span></span><br><span class="line">   m := counterVec.WithLabelValues(<span class="string">"500"</span>, <span class="string">"get"</span>)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">      m.Inc()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// promhttp的Handler()提供了一个暴露metrics的默认处理</span></span><br><span class="line">   http.Handle(<span class="string">"/metrics"</span>, promhttp.Handler())</span><br><span class="line">   log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余指标类型gauge、histogram以及summary的代码，请参考</p><p><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang</a>中相关的例子。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>package prometheus api文档地址：</p><p><a href="https://godoc.org/github.com/prometheus/client_golang/prometheus" target="_blank" rel="noopener">https://godoc.org/github.com/prometheus/client_golang/prometheus</a></p><p>package push api文档地址：</p><p><a href="https://godoc.org/github.com/prometheus/client_golang/prometheus/push" target="_blank" rel="noopener">https://godoc.org/github.com/prometheus/client_golang/prometheus/push</a></p><p>Code Demo：</p><p><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang</a></p><h3 id="Client-java"><a href="#Client-java" class="headerlink" title="Client_java"></a>Client_java</h3><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要依赖的prometheus相关包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring boot needed --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_spring_boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- The prometheus client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hotspot JVM metrics--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_hotspot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Exposition HTTPServer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_httpserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Exposition servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Pushgateway exposition--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_pushgateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Client_java针对Prometheus有多个包的支持，针对许多的应用场景，比如针对springboot、servlet以及httpserver等等。</p><p>目前springboot1.x版本能比较好的适配simpleclient_spring_boot(版本0.6.0，当前最新的版本)，springboot2.x版本不支持simpleclient_spring_boot，官方的意见是采用springboot的acuator包来完成metrics的暴露工作。</p><h4 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h4><p>这里针对springboot1.x版本的simpleclient_spring_boot方式来展开一下说明：</p><p>注册指标的最佳方法是通过静态的final变量，这和使用logger的方式很像：</p><p>Counter指标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterExporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Counter counterMetric = Counter.build().name(<span class="string">"dd_request_total"</span>)</span><br><span class="line">            .help(<span class="string">"The total num of request for accessing home page."</span>)</span><br><span class="line">            .labelNames(<span class="string">"method"</span>).register();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counterMetric.labels(<span class="string">"get"</span>).inc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gauge指标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GaugeExporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Gauge gaugeMetric = Gauge.build().name(<span class="string">"dd_available_processors_num"</span>)</span><br><span class="line">            .help(<span class="string">"Available processors num of system."</span>).register();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        gaugeMetric.set(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Histogram指标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistogramExporter</span> </span>&#123;</span><br><span class="line">     <span class="comment">//不设置buckets，采用默认的buckets:</span></span><br><span class="line">     <span class="comment">//new double[]&#123;0.005D, 0.01D, 0.025D, 0.05D, 0.075D, 0.1D, 0.25D, 0.5D, 0.75D, 1.0D, 2.5D, 5.0D, 7.5D, 10.0D&#125;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Histogram default_buckets_histogramMetric = Histogram.build()</span><br><span class="line">            .name(<span class="string">"requests_latency_seconds"</span>).help(<span class="string">"Request latency in seconds."</span>).register();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="comment">//使用计时器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//计算延时</span></span><br><span class="line">        <span class="comment">//声明 Timer</span></span><br><span class="line">        Histogram.Timer requestTimer = default_buckets_histogramMetric.startTimer();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//TODO 业务逻辑</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//计时结束</span></span><br><span class="line">            requestTimer.observeDuration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">//直接记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">long</span> latencySeconds)</span> </span>&#123;</span><br><span class="line">        default_buckets_histogramMetric.observe(latencySeconds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口类中加上Prometheus的相关注解开启metrics的expose：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnablePrometheusEndpoint</span></span><br><span class="line"><span class="meta">@EnableSpringBootMetricsCollector</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExporterDemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ExporterDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//开启默认的exports，打开jvm监控</span></span><br><span class="line">        DefaultExports.initialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了在应用程序中明确定义的度量标准之外，还会发布其他JVM度量标准。</p><p>application.yaml文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7070</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止搜集servo metrics</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">servo:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>编写一个controller来测试指标的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnablePrometheusTiming</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CounterExporter counterExporter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GaugeExporter gaugeExporter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HistogramExporter histogramExporter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counterExporter.process();</span><br><span class="line">        gaugeExporter.process();</span><br><span class="line">        histogramExporter.process(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="comment">//使用注解的方式来引入summary的指标</span></span><br><span class="line">    <span class="meta">@PrometheusTimeMethod</span>(name =<span class="string">"dd_req_duration_seconds"</span>, help = <span class="string">"Some helpful info here"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 可触发指标的变化</p><p>访问<a href="http://localhost:7070/prometheus" target="_blank" rel="noopener">http://localhost:7070/prometheus</a> 可以看到具体的指标内容</p><p>其他相关例子可以参考：</p><p><em><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java</a></em></p><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p>Client_java api文档地址：</p><p><a href="http://prometheus.github.io/client_java/" target="_blank" rel="noopener">http://prometheus.github.io/client_java/</a></p><p>Github：</p><p><a href="https://github.com/prometheus/client_java/" target="_blank" rel="noopener">https://github.com/prometheus/client_java/</a></p><p>Code Demo：</p><p><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java/" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java/</a></p><h2 id="Push模式"><a href="#Push模式" class="headerlink" title="Push模式"></a>Push模式</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p>推送一条简单的样本信息到pushgateway：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;dd_metric 3.14&quot; | curl --data-binary @- http:&#x2F;&#x2F;pushgateway&#x2F;metrics&#x2F;job&#x2F;dd_job</span><br></pre></td></tr></table></figure><p> 说明：<strong>“dd_metric 3.14”</strong> 这条sample归属于{job=”dd_job”}组。</p></li><li><p>推送更复杂一些的内容到pushgateway：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | curl --data-binary @- http:&#x2F;&#x2F;pushgateway&#x2F;metrics&#x2F;job&#x2F;dd_job&#x2F;instance&#x2F;dd_instance</span><br><span class="line"># TYPE dd_metric counter</span><br><span class="line">dd_metric &#123;label1&#x3D;&quot;val1&quot;&#125; 12</span><br><span class="line"># TYPE dd_another_metric2 gauge</span><br><span class="line">dd_another_metric 987.654</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p> 说明：上面两条sample归属于{job=”dd_job”,instance=”dd_instance”}组。</p></li></ol><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p>Github：</p><p><a href="https://github.com/prometheus/pushgateway/" target="_blank" rel="noopener">https://github.com/prometheus/pushgateway/</a></p>]]></content>
      
      
      <categories>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Exporter </tag>
            
            <tag> Metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S code-generator代码生成说明</title>
      <link href="/2019/01/08/code_gen/"/>
      <url>/2019/01/08/code_gen/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>k8s.io/code-generator是K8S提供的一个代码生成器项目，可以用来生成通用代码模板。<a id="more"></a></p><p>在开发k8s CRD的控制器controller时，code-generator生成版本化的、类型化的客户端代码（clientset），以及Lister、Informer代码。</p><p>code-generator提供和CRD有关的生成器包括：</p><ul><li><p>deepcopy-gen：为每个T类型生成 func (t* T) DeepCopy() *T方法。API类型都需要实现深拷贝</p></li><li><p>client-gen：为CustomResource API组生成强类型的clientset</p></li><li><p>informer-gen：为CustomResources生成Informer</p></li><li><p>lister-gen：为CustomResources生成Lister，Lister为GET/LIST请求提供只读缓存层</p></li></ul><blockquote><p>参考：<a href="https://github.com/openshift-evangelists/crd-code-generation>" target="_blank" rel="noopener">crd-code-generation</a>是使用代码生成器的一个示例项目</p></blockquote><h1 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li><p>在<code>$GOPATH/src</code>目录下创建项目目录<code>zlang-lst/demo-operator</code></p></li><li><p>进入项目目录<code>$GOPATH/src/zlang-lst/demo-operator</code>，执行<code>dep init</code></p></li></ol><blockquote><p>注意：如果遇到waiting for lockfile /home/www/golang/gopath/pkg/dep/sm.lock: Locked by other process，说明之前的dep运行留下了$GOPATH/pkg/dep/sm.lock文件，rm掉sm.lock即可。</p></blockquote><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>修改Gopkg.toml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">required &#x3D; [&quot;k8s.io&#x2F;code-generator&#x2F;cmd&#x2F;client-gen&quot;]</span><br><span class="line"></span><br><span class="line">[[constraint]]</span><br><span class="line">  name &#x3D; &quot;k8s.io&#x2F;apimachinery&quot;</span><br><span class="line">  branch &#x3D; &quot;release-1.12&quot;</span><br><span class="line"></span><br><span class="line">[[constraint]]</span><br><span class="line">  name &#x3D; &quot;k8s.io&#x2F;client-go&quot;</span><br><span class="line">  branch &#x3D; &quot;release-9.0&quot;</span><br><span class="line"></span><br><span class="line">[[constraint]]</span><br><span class="line">  name &#x3D; &quot;k8s.io&#x2F;code-generator&quot;</span><br><span class="line">  branch &#x3D; &quot;release-1.12&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：直接执行dep ensure是无效的，因为没有任何的代码，所以先要编写适当的代码</p></blockquote><p>编写代码后，执行<code>dep ensure</code></p><p>如果有遇到如下错误，说明需要设置代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Solving failure: No versions of k8s.io&#x2F;gengo met constraints:</span><br><span class="line"></span><br><span class="line">master: unable to deduce repository and source type for &quot;golang.org&#x2F;x&#x2F;tools&#x2F;imports&quot;: unable to read metadata: unable to fetch raw metadata: failed HTTP request to URL &quot;http:&#x2F;&#x2F;golang.org&#x2F;x&#x2F;tools&#x2F;imports?go-get&#x3D;1&quot;: Get http:&#x2F;&#x2F;golang.org&#x2F;x&#x2F;tools&#x2F;imports?go-get&#x3D;1: dial tcp 216.239.37.1:80: connect: connection refused</span><br></pre></td></tr></table></figure><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>这里的代理指的是“科学”上网的代理，使用的是ssr。“科学”上网的方法请自行google。</p><h3 id="windows："><a href="#windows：" class="headerlink" title="windows："></a>windows：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy&#x3D;127.0.0.1:1080</span><br><span class="line">set https_proxy&#x3D;127.0.0.1:1080</span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux :"></a>Linux :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>修改代码生成脚本hack/update-codegen.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"> </span><br><span class="line">SCRIPT_ROOT=$(dirname <span class="variable">$&#123;BASH_SOURCE&#125;</span>)/..</span><br><span class="line"><span class="comment"># 代码生成器包位置</span></span><br><span class="line">CODEGEN_PKG=<span class="variable">$&#123;CODEGEN_PKG:-$(cd $&#123;SCRIPT_ROOT&#125;</span>; ls -d -1 ./vendor/k8s.io/code-generator 2&gt;/dev/null || <span class="built_in">echo</span> <span class="variable">$&#123;GOPATH&#125;</span>/src/k8s.io/code-generator)&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># generate-groups.sh &lt;generators&gt; &lt;output-package&gt; &lt;apis-package&gt; &lt;groups-versions&gt;</span></span><br><span class="line"><span class="comment"># 使用哪些生成器，可选值deepcopy,defaulter,client,lister,informer，逗号分隔，all表示全部使用</span></span><br><span class="line">vendor/k8s.io/code-generator/generate-groups.sh all \</span><br><span class="line">  github.com/zlang-lst/demo-operator/pkg/client \</span><br><span class="line">  github.com/zlang-lst/demo-operator/pkg/apis \</span><br><span class="line">  zlang-lst.com:v1 \</span><br></pre></td></tr></table></figure><blockquote><p>注意：此脚本以项目的根目录为工作目，所以录需要在根目录下执行sh ./hack/update-codegen.sh </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@leon-virtual-machine:&#x2F;home&#x2F;www&#x2F;golang&#x2F;gopath&#x2F;src&#x2F;zlang-lst&#x2F;demo-operator# sh .&#x2F;hack&#x2F;update-codegen.sh </span><br><span class="line">Generating deepcopy funcs</span><br><span class="line">Generating clientset for dangdang.com:v1 at zlang-lst&#x2F;demo-operator&#x2F;pkg&#x2F;client&#x2F;clientset</span><br><span class="line">Generating listers for dangdang.com:v1 at zlang-lst&#x2F;demo-operator&#x2F;pkg&#x2F;client&#x2F;listers</span><br><span class="line">Generating informers for dangdang.com:v1 at zlang-lst&#x2F;demo-operator&#x2F;pkg&#x2F;client&#x2F;informers</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/openshift-evangelists/crd-code-generation" target="_blank" rel="noopener">https://github.com/openshift-evangelists/crd-code-generation</a></p><p><a href="https://blog.openshift.com/kubernetes-deep-dive-code-generation-customresources/" target="_blank" rel="noopener">https://blog.openshift.com/kubernetes-deep-dive-code-generation-customresources/</a></p><p><a href="https://git.gmem.cc/alex/demo-k8s-codegen" target="_blank" rel="noopener">https://git.gmem.cc/alex/demo-k8s-codegen</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> code-generator </tag>
            
            <tag> client-go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS系统终端连接WLAN Portal问题说明</title>
      <link href="/2017/07/18/Portal/"/>
      <url>/2017/07/18/Portal/</url>
      
        <content type="html"><![CDATA[<h1 id="CWP"><a href="#CWP" class="headerlink" title="CWP"></a>CWP</h1><p>在WIFI的应用场景中，有个很典型的应用，叫做<strong>Captive Portal</strong>，也叫<strong>Captive Web Portal (CWP)</strong>。<a id="more"></a></p><p>大致流程：</p><ol><li>用户的终端设备附着热点，接入WIFI；</li><li>使用浏览器打开任意网页；</li><li>得到一个WLAN Portal页面，需要用户进行认证；</li><li>认证通过后，允许自由访问网络，否则无法上网。</li></ol><p>有个典型的应用，就是移动总部的CMCC。咱们的Portal的推送认证流程就是如此。</p><h1 id="CNA"><a href="#CNA" class="headerlink" title="CNA"></a>CNA</h1><p>IOS，还有Mac OS，都有个功能，当接入无线网络后，会自动检测网络是否通。如果不通，则会自动弹出一个“页面”，让用户去登录。</p><p>Apple把这种功能叫做Captive Network Assistant（CNA）。</p><p>其原理如下：</p><ol><li><p>发送一个HTTP/1.0的请求到Apple服务器（例如： <a href="http://www.apple.com/library/test/success.html" target="_blank" rel="noopener">http://www.apple.com/library/test/success.html</a>）来探测网络是否连通。</p></li><li><p>接收1请求的应答，如果响应结果跟终端预计的一致，那么认为网络是通的，就不会自动弹出页面，同时，状态栏的WIFI图标出现，流程结束；否则，进入3步。</p></li><li><p>如果响应结果跟终端预计的不一致，那么认为有CWP存在。</p></li><li><p>如果有CWP存在，IOS就会自动打开一个页面，在这个页面中再发送一个HTTP/1.1的请求到Apple服务器（例如： <a href="http://www.apple.com/library/test/success.html" target="_blank" rel="noopener">http://www.apple.com/library/test/success.html</a>）。</p></li><li><p>因为存在CWP，所以4中自动打开的页面就能看到Portal了。</p></li></ol><p>补充：</p><p>4中IOS自动打开的页面，根据我们目前了解的情况来看，并不能算是一个标准的浏览器页面，这个页面对于cookie、js以及css都不能较好甚至不能支持，所以有些现场，用户使用IOS终端接入WLAN Portal时自动弹出的页面会出现样式错乱，js脚本执行无效，不支持cookie认证等情况。</p><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ul><li><p>鉴于IOS系统CNA机制的这种情况，我们一般建议用户出现问题时， 在IOS系统的设置中关闭掉对应热点的自动登录。</p></li><li><p>还有一种考虑方案，就是对于IOS系统的CAN探测请求从网络设备处放行，也即CNA流程第一步请求就能发送到Apple服务器。这样后续的流程就不继续，IOS终端系统就不会弹出页面，也不会产生无法连接WIFI的情况。</p></li></ul><h1 id="防止IOS自动弹出portal页"><a href="#防止IOS自动弹出portal页" class="headerlink" title="防止IOS自动弹出portal页"></a>防止IOS自动弹出portal页</h1><p>为了防止IOS切换ssid时自动弹出portal页，请将IOS的嗅探地址 <a href="http://captive.apple.com/hotspot-detect.html" target="_blank" rel="noopener">http://captive.apple.com/hotspot-detect.html</a> 放入白名单。</p><blockquote><p>摘自《微信公众平台技术文档》中 “Wi-Fi硬件鉴权协议接口说明” 3.5小节 第3点说明内容。<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1444894086" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1444894086</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Portal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Portal </tag>
            
            <tag> CWP </tag>
            
            <tag> CNA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
