<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JMX整理</title>
      <link href="/2019/08/09/JMX/"/>
      <url>/2019/08/09/JMX/</url>
      
        <content type="html"><![CDATA[<h1 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h1><p><strong>Java Management Extensions</strong></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>JMX是一个为应用植入监控及管理功能的框架；是一套标准的代理和服务。可以在任何Java应用中使用这些代理和服务。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>中间件WebLogic的管理页面就是基于JMX开发的，而JBoss则整个系统都基于JMX构架。</p><p>一个比较形象的关于Java开发的段子：</p><ul><li>菜鸟，系统配置参数写死在程序里，需要改变的时候就去修改代码，然后重新编译发布。</li><li>熟手，系统配置参数写写在配置文件里，需要改变的时候只要修改配置文件，重启应用，以便读取配置文件里最新的值。</li><li>好手，加一层缓存，把系统配置参数缓存起来，系统在获取的时候，先看看配置文件有没有改动，如有改动则重新从配置里读取，否则从缓存里读取。</li><li>高手，利用JMX，使用MBean来管理系统配置参数。</li></ul><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/21D4AF5C94E1499DABF429BC586E2EAE?method=download&shareKey=51fbc67ef0e35eda74e2f90c330dd9f1" alt="image"></p><h3 id="层级结构"><a href="#层级结构" class="headerlink" title="层级结构"></a>层级结构</h3><ul><li><p><strong>设备层（Instrumentation Layer）</strong>- 定义信息模型</p><p>什么是设备？从资源的角度来看，是对抽象资源的描述。比如说如果资源是数据库，管理组件中可以提供数据库的一些描述信息，比如数据库服务地址、端口，类型以及最大连接数等等，但是这些”抽象资源的描述“必须满足JMX规范的要求。</p><p>设备层定义了如何实现JMX管理资源的规范。一个JMX管理资源可以是一个Java应用、一个服务或一个具体设备，它们可以用Java开发，或者至少能用Java进行包装，并且能被置入JMX框架中，从而成为JMX的一个管理构件(Managed  Bean)，简称MBean。</p><blockquote><p>在JMX规范中，MBean定义如下：是一个能代表管理资源的Java对象，遵从一定的设计模式，同时还需实现规范定义的特定的接口。规范保证了所有的管理构件以一种标准的方式来表示被管理资源。 管理接口就是被管理资源暴露出的一些信息，通过对这些信息的修改就能控制被管理资源。一个管理构件的管理接口包括：能被接触的属性值、能够执行的操作、能发出的通知事件以及管理构件的构建器。</p></blockquote><p>MBean有以下几种类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>standard MBean</td><td>这种类型的MBean最简单，它能管理的资源（包括属性，方法，时间）必须定义在接口中，<br>然后MBean必须实现这个接口。它的命名也必须遵循一定的规范，例如我们的MBean为Abc，<br>则接口必须为AbcMBean。</td></tr><tr><td>dynamic MBean</td><td>必须实现javax.management.DynamicMBean接口，所有的属性，方法都在运行时定义。</td></tr><tr><td>model MBean</td><td>…</td></tr><tr><td>MXBean</td><td>实现xxxMXBean接口，或者不按照MXBean结尾来命名，但是需要加上@MXBean的注解，<br>支持各种数据类型，包括自定义类型。其他方法命名规则与MBean类似。</td></tr></tbody></table></li></ul><ul><li><p><strong>代理层（Agent Layer）</strong>- 管理相应资源</p><p>代理层主要定义了各种服务以及通信模型。该层的核心是 MBeanServer和一系列附加的Agent Service，MBean Server其实就是MBean的容器，可以注册Adapter、Connector、MBean并且直接管理MBean。所有的MBean都要向它注册，才能被管理。注册在MBeanServer上的MBean并不直接和远程应用程序进行通信，他们通过协议适配器（Adapter）和连接器（Connector）进行通信。通常Agent由一个MBeanServer和多个系统服务组成。</p><blockquote><p>代理层提供了4个Agent 服务：计时器（Timer）、监控（monitoring）、动态加载MBean（dynamic MBean loading ）、关系服务（relationship services ）</p></blockquote></li></ul><ul><li><p><strong>分布层（Distributed Layer）</strong>- 适配接口</p><p>分布层定义了一系列用来访问Agent的接口和组件，包括Adapter和Connector的描述。通过交互组件与JMX Agents建立连接后，用户可以用管理工具来和注册在Agents中的MBeans进行交互。</p></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>JMX相关的API主要在以下两处：</p><ul><li><p>java.lang.management.*</p></li><li><p>javax.management.*</p></li></ul><h2 id="JMX代码示例"><a href="#JMX代码示例" class="headerlink" title="JMX代码示例"></a>JMX代码示例</h2><ul><li>standard MBean示例</li></ul><ol><li>定义一个MBean接口，<strong>接口的命名规范为:具体的实现类为前缀+MBean</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义一个实现类，实现上述的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 该类名称必须与实现的接口的前缀保持一致（即MBean前面的名称)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">PersonMBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"Jack"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String age = <span class="string">"18"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello! "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get name : "</span>+ name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set name : "</span>+ name);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get age : "</span>+ age);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set age : "</span>+ age);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义agent层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAgent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//通过工厂类获取MBeanServer，用来做MBean的容器</span></span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        <span class="comment">//ObjectName中的取名是有一定规范的，格式为：“域名:name=MBean名称”，其中域名和MBean的名称可以任意取。这样定义后，就可以唯一标识我们定义的这个MBean的实现类了。</span></span><br><span class="line">        ObjectName objName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//创建并注册mbean</span></span><br><span class="line">        server.registerMBean(<span class="keyword">new</span> Person(), objName);</span><br><span class="line">        System.out.println(<span class="string">"Agent start"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过JMX提供的工具页访问管理MBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.adaptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> com.sun.jdmk.comm.HtmlAdaptorServer;</span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAgent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        ObjectName objName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//创建并注册MBean</span></span><br><span class="line">        server.registerMBean(<span class="keyword">new</span> Person(), objName);</span><br><span class="line">        <span class="comment">//创建HtmlAdaptorServer</span></span><br><span class="line">        ObjectName adapterName = <span class="keyword">new</span> ObjectName(<span class="string">"PersonAgent:name=Htmladapter,port=8082"</span>);</span><br><span class="line">        HtmlAdaptorServer adapter = <span class="keyword">new</span> HtmlAdaptorServer();</span><br><span class="line">        server.registerMBean(adapter, adapterName);</span><br><span class="line">        adapter.start();</span><br><span class="line">        System.out.println(<span class="string">"HtmlAdaptorServer start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：由于引入了com.sun.jdmk.comm.HtmlAdaptorServer，所以需要在pom.xml中设置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jdmk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmxtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过 <a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a> 可以访问管理配置页面</p><ul><li>通过client端进行远程访问</li></ul><ol><li>对Agent进行修改，增加JMXConnectorServer的监听</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnectorServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnectorServerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAgent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        ObjectName objName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//create mbean and register mbean</span></span><br><span class="line">        server.registerMBean(<span class="keyword">new</span> Person(), objName);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//注册一个端口，绑定url后用于客户端通过rmi方式连接JMXConnectorServer</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//URL路径的结尾可以随意指定，但如果需要用Jconsole来进行连接，则必须使用jmxrmi</span></span><br><span class="line">            JMXServiceURL url = <span class="keyword">new</span> JMXServiceURL(<span class="string">"service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi"</span>);</span><br><span class="line">            JMXConnectorServer jcs = JMXConnectorServerFactory.newJMXConnectorServer(url, <span class="keyword">null</span>, server);</span><br><span class="line">            jcs.start();</span><br><span class="line">            System.out.println(<span class="string">"Agent start"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RemoteException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>客户端Client程序，用于与Agent进行远程连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.PersonMBean;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.management.Attribute;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServerConnection;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServerInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnector;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXConnectorFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, Exception, NullPointerException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JMXServiceURL url = <span class="keyword">new</span> JMXServiceURL(<span class="string">"service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi"</span>);</span><br><span class="line">        JMXConnector jmxc = JMXConnectorFactory.connect(url,<span class="keyword">null</span>);</span><br><span class="line">        MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();</span><br><span class="line">        System.out.println(<span class="string">"Domains ......"</span>);</span><br><span class="line">        String[] domains = mbsc.getDomains();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;domains.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"doumain["</span> + i + <span class="string">"]="</span> + domains[i] );</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"MBean count = "</span> + mbsc.getMBeanCount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ObjectName的名称与注册时候的保持一致</span></span><br><span class="line">        ObjectName mbeanName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=Person"</span>);</span><br><span class="line">        <span class="comment">//设置指定Mbean的特定属性值</span></span><br><span class="line">        <span class="comment">//这里的setAttribute、getAttribute操作只能针对bean的属性</span></span><br><span class="line">        <span class="comment">//例如对getName或者setName进行操作，只能使用Name，需要去除方法的前缀</span></span><br><span class="line">        String age = (String)mbsc.getAttribute(mbeanName, <span class="string">"Age"</span>);</span><br><span class="line">        String name = (String)mbsc.getAttribute(mbeanName, <span class="string">"Name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"age="</span> + age + <span class="string">";name="</span> + name);</span><br><span class="line"></span><br><span class="line">        mbsc.setAttribute(mbeanName, <span class="keyword">new</span> Attribute(<span class="string">"Name"</span>,<span class="string">"Clark"</span>));</span><br><span class="line">        mbsc.setAttribute(mbeanName, <span class="keyword">new</span> Attribute(<span class="string">"Age"</span>,<span class="string">"22"</span>));</span><br><span class="line"></span><br><span class="line">        PersonMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbsc, mbeanName, PersonMBean<span class="class">.<span class="keyword">class</span>, <span class="title">false</span>)</span>;</span><br><span class="line">        proxy.sayHello();</span><br><span class="line">        proxy.sayHello(<span class="string">"Rose"</span>);</span><br><span class="line">        <span class="comment">//invoke调用bean的方法，只针对非设置属性的方法</span></span><br><span class="line">        <span class="comment">//例如invoke不能对getName方法进行调用</span></span><br><span class="line">        mbsc.invoke(mbeanName, <span class="string">"sayHello"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"I'll connect to JMX Server via client"</span>&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">"java.lang.String"</span>&#125;);</span><br><span class="line">        mbsc.invoke(mbeanName, <span class="string">"sayHello"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Notification - MBean之间的通信</li></ul><p>JMX 的通知由四部分组成：</p><p>a) Notification这个相当于一个信息包，封装了需要传递的信息</p><p>b) Notification broadcaster这个相当于一个广播器，把消息广播出</p><p>c) Notification listener 这是一个监听器，用于监听广播出来的通知信息</p><p>d) Notification filiter 这个一个过滤器，过滤掉不需要的通知。这个一般很少使用</p><ol><li>新创建一个资源ManMBean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">ManMBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义实现类</li></ol><blockquote><p>注意Man还继承了NotificationBroadcasterSupport，在sayHi方法里创建并发送了一个消息包。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.Notification;</span><br><span class="line"><span class="keyword">import</span> javax.management.NotificationBroadcasterSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">NotificationBroadcasterSupport</span> <span class="keyword">implements</span> <span class="title">ManMBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个信息包 格式：通知名称，发起者，序列号，发起通知时间，发送的消息</span></span><br><span class="line">        Notification notify = <span class="keyword">new</span> Notification(<span class="string">"Man.sayHi"</span>,<span class="keyword">this</span>,++seq,System.currentTimeMillis(),name);</span><br><span class="line">        <span class="comment">//发送通知</span></span><br><span class="line">        sendNotification(notify);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>设置监听器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"><span class="keyword">import</span> javax.management.Notification;</span><br><span class="line"><span class="keyword">import</span> javax.management.NotificationListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonListener</span> <span class="keyword">implements</span> <span class="title">NotificationListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNotification</span><span class="params">(Notification notification, Object handback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(handback <span class="keyword">instanceof</span> Person)</span><br><span class="line">        &#123;</span><br><span class="line">            Person person = (Person)handback;</span><br><span class="line">            person.sayHello(notification.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Agent</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx.notify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jmx.Person;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        ObjectName objectName = <span class="keyword">new</span> ObjectName(<span class="string">"Rose:name=Person"</span>);</span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        server.registerMBean(person, objectName);</span><br><span class="line">        Man man = <span class="keyword">new</span> Man();</span><br><span class="line">        server.registerMBean(man, <span class="keyword">new</span> ObjectName(<span class="string">"Jack:name=Man"</span>));</span><br><span class="line">        <span class="comment">//绑定notification监听器</span></span><br><span class="line">        man.addNotificationListener(<span class="keyword">new</span> PersonListener(), <span class="keyword">null</span>, person);</span><br><span class="line">        System.out.println(<span class="string">"Agent start"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JMX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus exporter开发说明</title>
      <link href="/2019/02/14/Prometheus/"/>
      <url>/2019/02/14/Prometheus/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Prometheus将所有采集到的样本数据以时间序列（time series）的方式保存在内存中，并且定时持久化到硬盘上。<a id="more"></a></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="Time-Series"><a href="#Time-Series" class="headerlink" title="Time Series"></a>Time Series</h3><p>每条time series通过指标名称(metric name)和一组标签集(label set)唯一确定。通常以这样的形式表现：</p><p><strong>&lt;metric name&gt;{&lt;label name&gt;=&lt;label value&gt;, …}</strong></p><p>如下所示，可以将time series理解为一个以时间为横轴的二维矩阵。矩阵中，在time series中的每一个点称为一个样本sample。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|</span><br><span class="line">| . . . . . . . . . . . . . . . . &lt;metric name&gt;&#123;&lt;label name&gt;&#x3D;&lt;label value&gt;, ...&#125; </span><br><span class="line">| . . . . . . . . . . . . . . . . http_requests_total&#123;code&#x3D;&quot;200&quot;, method&#x3D;&quot;GET&quot;&#125;</span><br><span class="line">| . . . . . . . . . . . . . . . . http_requests_total&#123;code&#x3D;&quot;200&quot;, method&#x3D;&quot;POST&quot;&#125;</span><br><span class="line">| . . . . . . . . . . . . . . . . http_requests_total&#123;code&#x3D;&quot;404&quot;, method&#x3D;&quot;GET&quot;&#125;</span><br><span class="line">|</span><br><span class="line">&lt;-------------- 时间 --------------&gt;</span><br></pre></td></tr></table></figure><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p>有序的sample组成了实际的time series数据。每个sample包括：</p><ul><li><p>样本值(value)： 一个float64的浮点型数据表示当前样本的值。</p></li><li><p>时间戳(timestamp)：一个精确到毫秒的时间戳。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;-- Metric name --&gt;&lt;--------- Labels ---------&gt;&lt;-- Timestamp --&gt;&lt;- Value -&gt;</span><br><span class="line">http_requests_total&#123;status&#x3D;&quot;200&quot;, method&#x3D;&quot;GET&quot;&#125; @1551324098.067   358007</span><br><span class="line">http_requests_total&#123;status&#x3D;&quot;200&quot;, method&#x3D;&quot;GET&quot;&#125; @1551324158.067   358012</span><br></pre></td></tr></table></figure><h3 id="Metric-Name"><a href="#Metric-Name" class="headerlink" title="Metric Name"></a>Metric Name</h3><p>Metric name反映监控样本的基本含义或特性。比如，http_requests_total - 表示当前系统接收到的HTTP请求总量。</p><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>Label体现当前样本的特征维度。相同的metric name，通过不同label集的结合,会形成特定的time series维度化实例。</p><p>比如：http_requests_total{ code=”200”, method=”GET” } 表示当前系统接收到的应答码为200的http get请求总量。</p><p>通过这些维度Prometheus可以对样本数据进行过滤以及聚合等处理。</p><h2 id="Metric类型"><a href="#Metric类型" class="headerlink" title="Metric类型"></a>Metric类型</h2><p>Prometheus定义了4种指标类型(metric type)：</p><p>Counter（计数器）</p><p>Gauge（仪表盘）</p><p>Histogram（直方图）</p><p>Summary（摘要）</p><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p><strong>Counter</strong>是一个累计度量指标，其工作方式和计数器一样，只增不减（除非系统重启counter重置）。</p><p>Counter 常用于统计服务的请求数、任务完成数和错误出现的次数等等。一般在定义counter类型指标的名称时推荐使用_total作为后缀。</p><p>例如：http_requests_total</p><h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><p><strong>Gauge</strong>侧重于反应系统的当前状态，这类指标的样本数据可增可减。</p><p>gauge常用于测量值，如温度、当前系统内存使用率以及并发请求数等等。</p><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><p>除了以上counter和gauge这两种简单的metric类型外。Prometheus还定义了两种较为复杂的metric类型：histogram和summary。</p><p>在监控的场景中，我们一般使用某些指标的平均值，例如CPU的平均使用率、页面的平均响应时间。</p><p>这种方式通常也会存在一些问题，以系统API调用的平均响应时间为例：如果大多数API请求都维持在100ms的响应时间范围内，个别请求的响应时间需要5s，那么计算响应的平均时间话会和实际情况有较大的差距，这种情况被称为长尾问题。</p><p>解决这个问题最简单的方式，就是按照请求延迟的范围进行分组。例如，统计延迟在各时延区间段（0~20ms,20~50ms,50~100ms, 100~200ms,…）的请求数有多少。</p><p>通过这种方式可以快速分析系统慢的原因。</p><p><strong>Histogram和Summary主要用于统计和分析样本的分布情况</strong>。通过这种类型的监控指标，我们可以快速了解监控样本的分布情况。</p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p><strong>Histogram</strong>对观测对象进行采样(通常是请求持续时间或响应大小)，对可配置范围内（buckets）的事件分布进行统计，同时还会统计所有监测值总和。</p><p>一个以 <strong>xxx</strong> 为基础指标名称的histogram指标包含三种时间序列：</p><ul><li><p><strong>xxx_bucket{le=”&lt;upper inclusive bound（上限包含边界）&gt;”}</strong>  <em>各区间范围内（包含上限边界），观测事件数目的统计</em></p></li><li><p><strong>xxx_sum</strong>  <em>所有观测值的总和</em></p></li><li><p><strong>xxx_count</strong>  <em>所有观测事件的总数，与xxx_bucket{le=”+Inf”}的值相同</em></p></li></ul><p><strong>Example：</strong></p><p>通过Prometheus自身提供的metrics接口，能看到类型为histogram的相关指标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># HELP prometheus_tsdb_compaction_duration_seconds Duration of compaction runs</span><br><span class="line"># TYPE prometheus_tsdb_compaction_duration_seconds histogram</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;1&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;2&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;4&quot;&#125; 105</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;8&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;16&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;32&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;64&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;128&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;256&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;512&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;+Inf&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_sum 416.511</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_count 117</span><br></pre></td></tr></table></figure><p>以上是prometheus时序数据库进行压缩操作耗时的一个分布统计情况。</p><p><strong>prometheus_tsdb_compaction_duration_seconds_count 117</strong>  <em>表示Prometheus时序数据库进行压缩操作的总次数为117</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_sum 416.511</strong>  <em>表示Prometheus时序数据库进行压缩操作总耗时416.511秒</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_bucket{le=”1”} 0</strong>  <em>表示压缩操作耗时在1秒及以内的次数为0</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_bucket{le=”4”} 105</strong>  <em>表示压缩操作耗时在4秒及以内的次数为105</em></p><p><strong>prometheus_tsdb_compaction_duration_seconds_bucket{le=”8”} 117</strong>  <em>表示压缩操作耗时在8秒及以内的次数为117</em></p><p>…</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><strong>Summary</strong>是采样点分位图统计，和histogram非常相似，通常针对的场景也是请求持续时间或响应大小。</p><p>Summary也提供对于事件的计数xxx_count以及值的汇总xxx_sum，同时还计算滑动时间窗口上的可配置分位数。</p><p><strong>分位数：</strong></p><blockquote><p>N个数按值排序，排第N&#42;φ（0 ≤ φ ≤ 1）位的数即为φ-分位数<br>φ分位数的示例：0.5分位数称为中位数。0.95分位数是第95百分位数</p></blockquote><p>一个以 <strong>xxx</strong> 为基础metric name的summary指标包含三种时间序列：</p><ul><li><p><strong>xxx {quantile=”&lt;φ&gt;”}</strong>  <em>分位数为φ（0 ≤ φ ≤ 1）的观测值</em></p></li><li><p><strong>xxx_sum</strong>  <em>所有观测值的总和</em></p></li><li><p><strong>xxx_count</strong>  <em>所有观测事件的总数</em></p></li></ul><p><strong>Example：</strong></p><p>通过Prometheus自身提供的metrics接口，能看到类型为Summary的相关指标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.</span><br><span class="line"># TYPE prometheus_tsdb_wal_fsync_duration_seconds nn</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds&#123;quantile&#x3D;&quot;0.5&quot;&#125; 0.013472843</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds&#123;quantile&#x3D;&quot;0.9&quot;&#125; 0.018071257</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds&#123;quantile&#x3D;&quot;0.99&quot;&#125; 0.022201</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds_sum 55.154448234000085</span><br><span class="line">prometheus_tsdb_wal_fsync_duration_seconds_count 4230</span><br></pre></td></tr></table></figure><p>以上是prometheus时序数据库进行WAL同步作耗时的一个统计情况。</p><p><strong>prometheus_tsdb_wal_fsync_duration_seconds_count 4230</strong>  <em>表示Prometheus进行WAL同步操作的总次数为4230</em></p><p><strong>prometheus_tsdb_wal_fsync_duration_seconds_sum 55.154</strong>  <em>表示Prometheus进行WAL同步操作的总耗时为55.154秒</em></p><p><strong>prometheus_tsdb_wal_fsync_duration_seconds{quantile=”0.5”} 0.013</strong>  <em>进行WAL同步操作耗时的中位数为0.013秒</em></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>Histogram和Summary都可以计算和统计样本的分布情况。只不过两者的统计分布的方式有些区别，Histogram统计<strong>buckets区间</strong>内的分布数，而Summary是按<strong>分位数</strong>进行统计。</p><p>针对Histogram，Prometheus提供了histogram_quantile()函数来计算分位数。</p><p><strong>Example：</strong></p><p>继续使用上面的histogram的例子，如果我们需要计算过去1天内Prometheus进行tsdb压缩操作耗时的第90个百分位数，我们可以用以下的方法：</p><p><strong>histogram_quantile(0.9,rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d])) 3.9125</strong></p><p><em>使用rate()函数指定分位数计算的时间窗口“过去1天内”</em></p><p><strong>两种metric类型的一些区别：</strong></p><table><thead><tr><th><strong>对比项</strong></th><th><strong>Histogram</strong></th><th><strong>Summary</strong></th></tr></thead><tbody><tr><td>需要的配置</td><td>选择适合于预期观测值范围的bucket</td><td>选择所需的φ分位数和滑动窗口，但后续其他φ分位数和滑动窗口无法计算</td></tr><tr><td>客户端表现</td><td>客户端实现非常简单，只需要累计</td><td>由于流式的分位数计算，客户端实现所需的成本比较高</td></tr><tr><td>服务端表现</td><td>服务端需要实现计算分位数（如果特别计算花费的时间太长，可以用规则记录）</td><td>服务端所需成本低</td></tr><tr><td>time series （除_sum和_count外）</td><td>每个配置bucket一个时间序列</td><td>每个配置分位数一个时间序列</td></tr><tr><td>φ分位数和滑动时间窗的设置</td><td>可通过Prometheus的表达式进行设置</td><td>由客户预先配置</td></tr><tr><td>聚合</td><td>可通过Prometheus的表达式进行设置</td><td>通常不可聚合</td></tr></tbody></table><p><strong>通过以上对比，我们建议对于分布情况的统计，采用histogram的metric类型</strong></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="Counter-1"><a href="#Counter-1" class="headerlink" title="Counter"></a>Counter</h3><p>Counter是一个简单且很强大的指标类型，使用counter类型指标记录某些事件发生的次数，通过Prometheus内置的聚合操作和函数，可以轻松的了解该事件产生速率的变化以及其他信息。</p><p>例如：</p><ul><li><p>通过rate()函数获取HTTP请求在过去5分钟内的增长率：  <strong>rate(http_requests_total[5m])</strong></p></li><li><p>通过聚合操作符topk，获取HTTP访问量前10的URL地址：  <strong>topk(10, http_requests_total)</strong></p></li></ul><h3 id="Gauge-1"><a href="#Gauge-1" class="headerlink" title="Gauge"></a>Gauge</h3><p>Gauge类型的指标是使用率最高的，所表示的内容是最直接的，几乎不用通过任何的表达式处理。通过Gauge指标，可以很清楚了解某个系统属性的当前状态，比如：节点内存剩余字节数node_memory_MemFree，open file descriptors数目process_max_fds 等等。</p><p>Gauge还有一个比较特殊的用法，结合label集，可以表示一些info信息，如：</p><p><em>prometheus_build_info{branch=”HEAD”,goversion=”go1.10”,revision=”bc6058c81272a8d938c05e75607371284236aadc”,version=”2.2.1”} 1</em></p><h3 id="Histogram-1"><a href="#Histogram-1" class="headerlink" title="Histogram"></a>Histogram</h3><p>Histogram非常适合观测“durations”以及“sizes”这类的指标。通过Histogram类型的指标，可以计算平均值、SLA以及分位数（分布情况）。</p><p>还是以上面的prometheus_tsdb_compaction_duration_seconds指标为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># HELP prometheus_tsdb_compaction_duration_seconds Duration of compaction runs</span><br><span class="line"># TYPE prometheus_tsdb_compaction_duration_seconds histogram</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;1&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;2&quot;&#125; 0</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;4&quot;&#125; 105</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;8&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;16&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;32&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;64&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;128&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;256&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;512&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;+Inf&quot;&#125; 117</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_sum 416.511020335</span><br><span class="line">prometheus_tsdb_compaction_duration_seconds_count 117</span><br></pre></td></tr></table></figure><p><strong>1. 平均值</strong></p><p>计算过去1d内的tsdb压缩操作平均时长：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rate(prometheus_tsdb_compaction_duration_seconds_sum[1d]) </span><br><span class="line">&#x2F; </span><br><span class="line">rate(prometheus_tsdb_compaction_duration_seconds_count[1d])</span><br></pre></td></tr></table></figure><p>在Prometheus中执行以上PromQL后可以计算得到平均耗时为3.5秒</p><p><strong>2. SLA</strong></p><p>SLA告警，假设系统要求是：90％的压缩操作耗时需要在4s内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum(rate(prometheus_tsdb_compaction_duration_seconds_bucket&#123;le&#x3D;&quot;4&quot;&#125;[1d])) by (job) </span><br><span class="line">&#x2F; </span><br><span class="line">sum(rate(prometheus_tsdb_compaction_duration_seconds_count[1d])) by (job)</span><br></pre></td></tr></table></figure><p>在Prometheus中执行以上PromQL后可以得到结果为0.94，说明94%的压缩耗时是在4s秒内，如果计算结果低于0.9，那么可以设置触发告警。</p><p><strong>3. 分位数</strong></p><p>通过Prometheus的histogram_quantile()方法进行分布情况统计：histogram_quantile(φ float, b instant-vector)从buckets b中, 计算φ-分位数（0≤φ≤1）</p><p>计算第90个百分位数，也即：过去1天内90%的压缩耗时在多少秒以内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9,rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d]))</span><br></pre></td></tr></table></figure><p>在Prometheus中执行以上PromQL后可以得到结果为3.9，说明90%的压缩操作能在3.9秒以内完成，如果需要计算其他的分位数，可以直接修改φ参数值。</p><p>假如还需要聚合，可以进行如下的计算：</p><p>a) 针对job标签进行分组聚合计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9,sum(rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d])) by (job,le))</span><br></pre></td></tr></table></figure><p>b) 全部聚合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9,sum(rate(prometheus_tsdb_compaction_duration_seconds_bucket[1d])) by (le))</span><br></pre></td></tr></table></figure><p><em>注意：le标签是必需的，所以聚合所有的例子中，需要保留le</em></p><p><strong>4. 其他</strong></p><p>Apdex score应用性能指数计算，用户对应用性能满意度的量化值，其计算公式如下：</p><blockquote><p>Apdex score = (满意样本 + 容忍样本/2) / 样本总数 </p></blockquote><p>在本例中，假设“满意样本”：http请求时长≤0.3s，“容忍样本”：0.3s≤http请求时长≤1.2s（一般不超过满意样本的4倍）。</p><p>如下表达式为计算过去5分钟内，各job下http请求时长的Apdex分数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(sum(rate(http_request_duration_seconds_bucket&#123;le&#x3D;&quot;0.3&quot;&#125;[5m])) by (job) </span><br><span class="line"> + </span><br><span class="line"> sum(rate(http_request_duration_seconds_bucket&#123;le&#x3D;&quot;1.2&quot;&#125;[5m])) by (job))</span><br><span class="line"> &#x2F; 2 &#x2F; sum(rate(http_request_duration_seconds_count[5m])) by (job)</span><br></pre></td></tr></table></figure><p><em>注意：le=1.2的buckets中包含了le=0.3的bucket，所以满意样本数也要除以2。</em></p><h1 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h1><h2 id="命名要求"><a href="#命名要求" class="headerlink" title="命名要求"></a>命名要求</h2><h3 id="指标-Metric"><a href="#指标-Metric" class="headerlink" title="指标(Metric)"></a>指标(Metric)</h3><ol><li><p>Metric name只能由ASCII字符、数字、下划线以及冒号组成，并且必须符合正则表达式：[a-zA-Z_:][a-zA-Z0-9_:]&#42; </p></li><li><p>要有与所属metric域相关的前缀，这个前缀在client中被称为namespace。例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prometheus_notifications_total （特定于Prometheus）</span><br><span class="line">http_request_duration_seconds （针对于所有HTTP请求）</span><br></pre></td></tr></table></figure></li><li><p>对于需要指明样本值单位的，必须要有一个复数形式的基本单位后缀，例如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http_request_duration_seconds （单位为seconds） </span><br><span class="line">node_memory_usage_bytes （单位为bytes） </span><br><span class="line">http_requests_total （无单位的累计计数）</span><br><span class="line">process_cpu_seconds_total （单位为seconds的累积计数）</span><br></pre></td></tr></table></figure></li><li><p>应该与所有标签维度上测量的内容表示同样的逻辑。</p></li></ol><h3 id="标签-Label"><a href="#标签-Label" class="headerlink" title="标签(Label)"></a>标签(Label)</h3><ol><li><p>Label name只能由ASCII字符、数字以及下划线组成，并且必须符合正则表达式：[a-zA-Z_][a-zA-Z0-9_]&#42;</p></li><li><p>能区分正在观测的对象的特征。例如：api_request_duration_seconds - 区分请求阶段： stage=”extract|transform|load”</p></li><li><p>避免使用过于通用的标签名，比如“type”；避免使用可能与目标的标签发生冲突的标签名，比如：“service”、“env”。</p></li><li><p>不要使用Prometheus专有的特殊含义标签，比如“le”、“quantile”。</p></li><li><p>不要将label name放在metric name中，这样会引起冗余，如果聚合了相应的label，会引起混淆。</p></li><li><p>不要使用标签来存储具有高基数（大量不同标签值）的维度，例如用户ID、邮箱地址等无限制的值集。因为标签键值对的每个组合，都会代表一个新的时间序列。</p></li></ol><h2 id="实践参考"><a href="#实践参考" class="headerlink" title="实践参考"></a>实践参考</h2><h3 id="Four-Golden-Signals"><a href="#Four-Golden-Signals" class="headerlink" title="Four Golden Signals"></a>Four Golden Signals</h3><p><strong>Four Golden Signals</strong>是Google针对大量分布式监控的经验总结，可以在服务级别帮助衡量终端用户体验、服务中断、业务影响等层面的问题。主要关注与以下四种类型的指标：<strong>延迟</strong>，<strong>流量</strong>，<strong>错误</strong>以及<strong>饱和度</strong>。</p><p><strong>延迟</strong>：记录用户请求所需的时间，重点是要区分成功请求的延迟时间和失败请求的延迟时间。</p><p><strong>流量</strong>：流量对于不同类型的系统而言可能代表不同的含义。例如，在HTTP REST API中,流量通常是每秒HTTP请求数。监控当前系统的流量，可以衡量服务的容量需求。</p><p><strong>错误</strong>：监测系统所有发生的错误请求，衡量错误率。对于失败而言有些是显式的(比如,HTTP 500错误)，而有些是隐式(比如，HTTP响应200，但实际业务流程中有错误的)。</p><p><strong>饱和度</strong>：衡量系统服务的饱和度。主要关注最影响服务状态的受限资源。例如，系统主要受内存影响，那就主要关注内存状态，如果系统受限于磁盘I/O，那就主要观测磁盘I/O的状态。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>出于监控的考虑，服务通常可以分为三种类型：在线服务，离线处理和批量作业。</p><p><strong>在线服务</strong>，此类系统中的关键指标是处理的请求数，错误数和延迟。正在进行的请求数也非常有用。</p><p><strong>离线处理</strong>，此类系统中通常有多个处理阶段，关键的指标是各阶段正在进行的项目数以及最近一次处理的项目数。</p><p><strong>批量作业</strong>和离线处理之间的界限很模糊，因为离线处理常常在批量作业中完成。批量作业的关键指标是执行的批次，作业每个主要阶段耗费的时间，总体运行时间，最后一次（成功或失败）的时间，这些都是gauge类型的指标。因为批量的显著特征就是不会连续的运行，这使得难以进行监测采样提取，所以建议将所有的指标都push到<strong>PushGateway</strong>。</p><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><p><strong>线程池</strong>：对于任何类型的线程池，关键指标是排队请求的数量，正在使用的线程数，线程总数，处理的任务数以及它们花费的时间。队列中等待的时间也很有用。</p><p><strong>高速缓存</strong>：缓存的关键指标是总查询，命中，总体延迟，然后是缓存所在的在线服务系统的查询计数，错误和延迟。</p><h1 id="Exporter"><a href="#Exporter" class="headerlink" title="Exporter"></a>Exporter</h1><p>广义上讲，所有可以向Prometheus提供监控样本数据的服务都可以被称为一个Exporter。在Prometheus中，exporter的一个实例称为target。Prometheus通过轮询的方式定期从这些target中拉取样本数据。</p><p>Prometheus社区提供了丰富的Exporter实现，涵盖了从基础设施，中间件以及网络等各个方面的监控功能。这些Exporter可以实现大部分通用的监控需求。</p><p>用户还可以基于Prometheus提供的Client Library创建自己的Exporter程序，目前Prometheus社区官方提供了对以下编程语言的支持：Go、Java/Scala、Python、Ruby。同时还有第三方提供了一些非官方的客户端libraries。</p><h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><h3 id="独立运行"><a href="#独立运行" class="headerlink" title="独立运行"></a>独立运行</h3><p>以Node Exporter为例，由于无法直接从操作系统层面上提供对Prometheus的支持，所以需要运行独立运行一个的服务，通过操作系统提供的相关接口，将系统的运行状态数据转换为可供Prometheus拉取的监控数据。这些Exporter承担一个中间代理的角色。</p><h3 id="集成服务"><a href="#集成服务" class="headerlink" title="集成服务"></a>集成服务</h3><p>很多开源项目如Kubernetes，ETCD等直接在代码中使用了Prometheus的Client<br>Library，提供了对Prometheus的直接支持。这种方式让应用服务直接将内部的运行状态暴露给Prometheus，可以更好的监控系统的内部运行状态，比较适合需要更多自定义监控指标需求的项目。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><table><thead><tr><th><strong>Aspect</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><strong>Transmission</strong></td><td>HTTP</td></tr><tr><td><strong>Encoding</strong></td><td>UTF-8, \n line endings</td></tr><tr><td><strong>HTTP Content-Type</strong></td><td>text/plain; version=0.0.4 version用于指定Text-based的格式版本，当没有指定版本的时候，默认使用最新格式规范的版本。</td></tr><tr><td><strong>Optional HTTP Content-Encoding</strong></td><td>gzip</td></tr></tbody></table><h3 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h3><p>Exporter需要按照Prometheus的规范，返回监控的样本数据。以Prometheus为例，当访问/metrics地址时会返回以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.</span><br><span class="line"># TYPE process_cpu_seconds_total counter</span><br><span class="line">process_cpu_seconds_total 39531.35</span><br><span class="line"># HELP process_max_fds Maximum number of open file descriptors.</span><br><span class="line"># TYPE process_max_fds gauge</span><br><span class="line">process_max_fds 65536</span><br></pre></td></tr></table></figure><p>主要由三个部分组成：</p><p><strong>帮助信息（HELP）</strong>,格式：<strong><em>&#35; HELP &lt;metrics_name&gt; &lt;doc_string&gt;</em></strong></p><p><strong>类型信息（TYPE）</strong>,格式：<strong><em>&#35; TYPE &lt;metrics_name&gt; &lt;metrics_type&gt;</em></strong> 如果没有明确的指标类型需要指定为untyped</p><p><strong>样本信息（sample）</strong>,每一行样本需要满足以下格式规范：</p><p><strong><em>metric_name</em></strong> <strong>[</strong>“{“ <strong><em>label_name</em></strong> “=” `“` <strong><em>label_value</em></strong> `“` <strong>{</strong> “,” <strong><em>label_name</em></strong> “=” `“` <strong><em>label_value</em></strong> `“` <strong>}</strong> <strong>[</strong> “,” <strong>]</strong> “}” <strong>]</strong> <strong><em>Value</em></strong> <strong>[</strong> <strong><em>Timestamp</em></strong> <strong>]</strong></p><p><strong>[ ]</strong> : 表示可以选</p><p><strong>{ }</strong> : 表示可重复0到多次</p><p><strong><em>Value</em></strong> 为float64型的数据，此外，Nan, +Inf 和 –Inf也是有效值，分表代表非数字，正无穷和负无穷。</p><p><strong><em>Timestamp</em></strong> 为int64型的数据，从1970-01-01 00:00:00以来的毫秒数。如果不填，则默认为当前时间。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="Client-go"><a href="#Client-go" class="headerlink" title="Client_go"></a>Client_go</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>需要prometheus, promauto以及 promhttp这三个库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com&#x2F;prometheus&#x2F;client_golang&#x2F;prometheus</span><br><span class="line">go get github.com&#x2F;prometheus&#x2F;client_golang&#x2F;prometheus&#x2F;promauto</span><br><span class="line">go get github.com&#x2F;prometheus&#x2F;client_golang&#x2F;prometheus&#x2F;promhttp</span><br></pre></td></tr></table></figure><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><p>要暴露Prometheus的指标，需要提供“/metrics” 的HTTP端点。可以使用promhttp库的HTTP Handler来处理。</p><p>下面的例子，就是通过<a href="http://localhost:8080/metrics" target="_blank" rel="noopener">http://localhost:8080/metrics</a>的方式暴露服务的默认指标：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"net/http"</span></span><br><span class="line">   <span class="string">"github.com/prometheus/client_golang/prometheus/promhttp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   http.Handle(<span class="string">"/metrics"</span>, promhttp.Handler())</span><br><span class="line">   http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据业务需求，还可以注册自定义指标，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"log"</span></span><br><span class="line">   <span class="string">"net/http"</span></span><br><span class="line">   <span class="string">"github.com/prometheus/client_golang/prometheus"</span></span><br><span class="line">   <span class="string">"github.com/prometheus/client_golang/prometheus/promhttp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   <span class="comment">//counter</span></span><br><span class="line">   counter = prometheus.NewCounter(prometheus.CounterOpts&#123;</span><br><span class="line">      <span class="comment">//完整的Metric名称 = Namespace+"_"+Subsystem+"_"+Name</span></span><br><span class="line">      <span class="comment">//Name强制要求填写</span></span><br><span class="line">      Namespace: <span class="string">"dangdang"</span>,</span><br><span class="line">      Subsystem: <span class="string">"arch"</span>,</span><br><span class="line">      Name: <span class="string">"http_requests_total"</span>,</span><br><span class="line">      Help: <span class="string">"The total number of http request"</span>,</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//counter vector</span></span><br><span class="line">   <span class="comment">//counter的集合，一组有同样名称、描述，但通过不同标签划分的counter型指标</span></span><br><span class="line">   <span class="comment">//例如: http_requests_total&#123;code="200",method="get"&#125;</span></span><br><span class="line">   counterVec = prometheus.NewCounterVec(</span><br><span class="line">      prometheus.CounterOpts&#123;</span><br><span class="line">         Name: <span class="string">"http_requests_total"</span>,</span><br><span class="line">         Help: <span class="string">"How many HTTP requests processed, partitioned by status code and HTTP method."</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      []<span class="keyword">string</span>&#123;<span class="string">"code"</span>,<span class="string">"method"</span>&#125;,</span><br><span class="line">   )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 指标需要注册，Metrics have to be registered to be exposed</span></span><br><span class="line">   prometheus.MustRegister(counter)</span><br><span class="line">   prometheus.MustRegister(counterVec)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//counter</span></span><br><span class="line">   counter.Add(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//counter vector</span></span><br><span class="line">   counterVec.With(prometheus.Labels&#123;<span class="string">"code"</span>:<span class="string">"200"</span>, <span class="string">"method"</span>:<span class="string">"post"</span>&#125;).Add(<span class="number">300</span>)</span><br><span class="line">   counterVec.With(prometheus.Labels&#123;<span class="string">"code"</span>:<span class="string">"400"</span>, <span class="string">"method"</span>:<span class="string">"get"</span>&#125;).Add(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果对metrics需要很频繁的访问，最好获取一次metrics，并且保留其句柄</span></span><br><span class="line">   m := counterVec.WithLabelValues(<span class="string">"500"</span>, <span class="string">"get"</span>)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">      m.Inc()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// promhttp的Handler()提供了一个暴露metrics的默认处理</span></span><br><span class="line">   http.Handle(<span class="string">"/metrics"</span>, promhttp.Handler())</span><br><span class="line">   log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余指标类型gauge、histogram以及summary的代码，请参考</p><p><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang</a>中相关的例子。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>package prometheus api文档地址：</p><p><a href="https://godoc.org/github.com/prometheus/client_golang/prometheus" target="_blank" rel="noopener">https://godoc.org/github.com/prometheus/client_golang/prometheus</a></p><p>package push api文档地址：</p><p><a href="https://godoc.org/github.com/prometheus/client_golang/prometheus/push" target="_blank" rel="noopener">https://godoc.org/github.com/prometheus/client_golang/prometheus/push</a></p><p>Code Demo：</p><p><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-golang</a></p><h3 id="Client-java"><a href="#Client-java" class="headerlink" title="Client_java"></a>Client_java</h3><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要依赖的prometheus相关包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring boot needed --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_spring_boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- The prometheus client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hotspot JVM metrics--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_hotspot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Exposition HTTPServer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_httpserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Exposition servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Pushgateway exposition--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_pushgateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Client_java针对Prometheus有多个包的支持，针对许多的应用场景，比如针对springboot、servlet以及httpserver等等。</p><p>目前springboot1.x版本能比较好的适配simpleclient_spring_boot(版本0.6.0，当前最新的版本)，springboot2.x版本不支持simpleclient_spring_boot，官方的意见是采用springboot的acuator包来完成metrics的暴露工作。</p><h4 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h4><p>这里针对springboot1.x版本的simpleclient_spring_boot方式来展开一下说明：</p><p>注册指标的最佳方法是通过静态的final变量，这和使用logger的方式很像：</p><p>Counter指标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterExporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Counter counterMetric = Counter.build().name(<span class="string">"dd_request_total"</span>)</span><br><span class="line">            .help(<span class="string">"The total num of request for accessing home page."</span>)</span><br><span class="line">            .labelNames(<span class="string">"method"</span>).register();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counterMetric.labels(<span class="string">"get"</span>).inc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gauge指标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GaugeExporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Gauge gaugeMetric = Gauge.build().name(<span class="string">"dd_available_processors_num"</span>)</span><br><span class="line">            .help(<span class="string">"Available processors num of system."</span>).register();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        gaugeMetric.set(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Histogram指标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistogramExporter</span> </span>&#123;</span><br><span class="line">     <span class="comment">//不设置buckets，采用默认的buckets:</span></span><br><span class="line">     <span class="comment">//new double[]&#123;0.005D, 0.01D, 0.025D, 0.05D, 0.075D, 0.1D, 0.25D, 0.5D, 0.75D, 1.0D, 2.5D, 5.0D, 7.5D, 10.0D&#125;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Histogram default_buckets_histogramMetric = Histogram.build()</span><br><span class="line">            .name(<span class="string">"requests_latency_seconds"</span>).help(<span class="string">"Request latency in seconds."</span>).register();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="comment">//使用计时器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//计算延时</span></span><br><span class="line">        <span class="comment">//声明 Timer</span></span><br><span class="line">        Histogram.Timer requestTimer = default_buckets_histogramMetric.startTimer();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//TODO 业务逻辑</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//计时结束</span></span><br><span class="line">            requestTimer.observeDuration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">//直接记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">long</span> latencySeconds)</span> </span>&#123;</span><br><span class="line">        default_buckets_histogramMetric.observe(latencySeconds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口类中加上Prometheus的相关注解开启metrics的expose：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnablePrometheusEndpoint</span></span><br><span class="line"><span class="meta">@EnableSpringBootMetricsCollector</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExporterDemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ExporterDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//开启默认的exports，打开jvm监控</span></span><br><span class="line">        DefaultExports.initialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了在应用程序中明确定义的度量标准之外，还会发布其他JVM度量标准。</p><p>application.yaml文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7070</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止搜集servo metrics</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">servo:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>编写一个controller来测试指标的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnablePrometheusTiming</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CounterExporter counterExporter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GaugeExporter gaugeExporter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HistogramExporter histogramExporter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counterExporter.process();</span><br><span class="line">        gaugeExporter.process();</span><br><span class="line">        histogramExporter.process(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="comment">//使用注解的方式来引入summary的指标</span></span><br><span class="line">    <span class="meta">@PrometheusTimeMethod</span>(name =<span class="string">"dd_req_duration_seconds"</span>, help = <span class="string">"Some helpful info here"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 可触发指标的变化</p><p>访问<a href="http://localhost:7070/prometheus" target="_blank" rel="noopener">http://localhost:7070/prometheus</a> 可以看到具体的指标内容</p><p>其他相关例子可以参考：</p><p><em><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java</a></em></p><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p>Client_java api文档地址：</p><p><a href="http://prometheus.github.io/client_java/" target="_blank" rel="noopener">http://prometheus.github.io/client_java/</a></p><p>Github：</p><p><a href="https://github.com/prometheus/client_java/" target="_blank" rel="noopener">https://github.com/prometheus/client_java/</a></p><p>Code Demo：</p><p><a href="http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java/" target="_blank" rel="noopener">http://git.dangdang.com/arch_prometheus/exporter-demo/tree/master/client-java/</a></p><h2 id="Push模式"><a href="#Push模式" class="headerlink" title="Push模式"></a>Push模式</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p>推送一条简单的样本信息到pushgateway：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;dd_metric 3.14&quot; | curl --data-binary @- http:&#x2F;&#x2F;pushgateway&#x2F;metrics&#x2F;job&#x2F;dd_job</span><br></pre></td></tr></table></figure><p> 说明：<strong>“dd_metric 3.14”</strong> 这条sample归属于{job=”dd_job”}组。</p></li><li><p>推送更复杂一些的内容到pushgateway：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | curl --data-binary @- http:&#x2F;&#x2F;pushgateway&#x2F;metrics&#x2F;job&#x2F;dd_job&#x2F;instance&#x2F;dd_instance</span><br><span class="line"># TYPE dd_metric counter</span><br><span class="line">dd_metric &#123;label1&#x3D;&quot;val1&quot;&#125; 12</span><br><span class="line"># TYPE dd_another_metric2 gauge</span><br><span class="line">dd_another_metric 987.654</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p> 说明：上面两条sample归属于{job=”dd_job”,instance=”dd_instance”}组。</p></li></ol><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p>Github：</p><p><a href="https://github.com/prometheus/pushgateway/" target="_blank" rel="noopener">https://github.com/prometheus/pushgateway/</a></p>]]></content>
      
      
      <categories>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Exporter </tag>
            
            <tag> Metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S code-generator代码生成说明</title>
      <link href="/2019/01/08/code_gen/"/>
      <url>/2019/01/08/code_gen/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>k8s.io/code-generator是K8S提供的一个代码生成器项目，可以用来生成通用代码模板。<a id="more"></a></p><p>在开发k8s CRD的控制器controller时，code-generator生成版本化的、类型化的客户端代码（clientset），以及Lister、Informer代码。</p><p>code-generator提供和CRD有关的生成器包括：</p><ul><li><p>deepcopy-gen：为每个T类型生成 func (t* T) DeepCopy() *T方法。API类型都需要实现深拷贝</p></li><li><p>client-gen：为CustomResource API组生成强类型的clientset</p></li><li><p>informer-gen：为CustomResources生成Informer</p></li><li><p>lister-gen：为CustomResources生成Lister，Lister为GET/LIST请求提供只读缓存层</p></li></ul><blockquote><p>参考：<a href="https://github.com/openshift-evangelists/crd-code-generation>" target="_blank" rel="noopener">crd-code-generation</a>是使用代码生成器的一个示例项目</p></blockquote><h1 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li><p>在<code>$GOPATH/src</code>目录下创建项目目录<code>zlang-lst/demo-operator</code></p></li><li><p>进入项目目录<code>$GOPATH/src/zlang-lst/demo-operator</code>，执行<code>dep init</code></p></li></ol><blockquote><p>注意：如果遇到waiting for lockfile /home/www/golang/gopath/pkg/dep/sm.lock: Locked by other process，说明之前的dep运行留下了$GOPATH/pkg/dep/sm.lock文件，rm掉sm.lock即可。</p></blockquote><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>修改Gopkg.toml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">required &#x3D; [&quot;k8s.io&#x2F;code-generator&#x2F;cmd&#x2F;client-gen&quot;]</span><br><span class="line"></span><br><span class="line">[[constraint]]</span><br><span class="line">  name &#x3D; &quot;k8s.io&#x2F;apimachinery&quot;</span><br><span class="line">  branch &#x3D; &quot;release-1.12&quot;</span><br><span class="line"></span><br><span class="line">[[constraint]]</span><br><span class="line">  name &#x3D; &quot;k8s.io&#x2F;client-go&quot;</span><br><span class="line">  branch &#x3D; &quot;release-9.0&quot;</span><br><span class="line"></span><br><span class="line">[[constraint]]</span><br><span class="line">  name &#x3D; &quot;k8s.io&#x2F;code-generator&quot;</span><br><span class="line">  branch &#x3D; &quot;release-1.12&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：直接执行dep ensure是无效的，因为没有任何的代码，所以先要编写适当的代码</p></blockquote><p>编写代码后，执行<code>dep ensure</code></p><p>如果有遇到如下错误，说明需要设置代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Solving failure: No versions of k8s.io&#x2F;gengo met constraints:</span><br><span class="line"></span><br><span class="line">master: unable to deduce repository and source type for &quot;golang.org&#x2F;x&#x2F;tools&#x2F;imports&quot;: unable to read metadata: unable to fetch raw metadata: failed HTTP request to URL &quot;http:&#x2F;&#x2F;golang.org&#x2F;x&#x2F;tools&#x2F;imports?go-get&#x3D;1&quot;: Get http:&#x2F;&#x2F;golang.org&#x2F;x&#x2F;tools&#x2F;imports?go-get&#x3D;1: dial tcp 216.239.37.1:80: connect: connection refused</span><br></pre></td></tr></table></figure><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>这里的代理指的是“科学”上网的代理，使用的是ssr。“科学”上网的方法请自行google。</p><h3 id="windows："><a href="#windows：" class="headerlink" title="windows："></a>windows：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy&#x3D;127.0.0.1:1080</span><br><span class="line">set https_proxy&#x3D;127.0.0.1:1080</span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux :"></a>Linux :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>修改代码生成脚本hack/update-codegen.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"> </span><br><span class="line">SCRIPT_ROOT=$(dirname <span class="variable">$&#123;BASH_SOURCE&#125;</span>)/..</span><br><span class="line"><span class="comment"># 代码生成器包位置</span></span><br><span class="line">CODEGEN_PKG=<span class="variable">$&#123;CODEGEN_PKG:-$(cd $&#123;SCRIPT_ROOT&#125;</span>; ls -d -1 ./vendor/k8s.io/code-generator 2&gt;/dev/null || <span class="built_in">echo</span> <span class="variable">$&#123;GOPATH&#125;</span>/src/k8s.io/code-generator)&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># generate-groups.sh &lt;generators&gt; &lt;output-package&gt; &lt;apis-package&gt; &lt;groups-versions&gt;</span></span><br><span class="line"><span class="comment"># 使用哪些生成器，可选值deepcopy,defaulter,client,lister,informer，逗号分隔，all表示全部使用</span></span><br><span class="line">vendor/k8s.io/code-generator/generate-groups.sh all \</span><br><span class="line">  github.com/zlang-lst/demo-operator/pkg/client \</span><br><span class="line">  github.com/zlang-lst/demo-operator/pkg/apis \</span><br><span class="line">  zlang-lst.com:v1 \</span><br></pre></td></tr></table></figure><blockquote><p>注意：此脚本以项目的根目录为工作目，所以录需要在根目录下执行sh ./hack/update-codegen.sh </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@leon-virtual-machine:&#x2F;home&#x2F;www&#x2F;golang&#x2F;gopath&#x2F;src&#x2F;zlang-lst&#x2F;demo-operator# sh .&#x2F;hack&#x2F;update-codegen.sh </span><br><span class="line">Generating deepcopy funcs</span><br><span class="line">Generating clientset for dangdang.com:v1 at zlang-lst&#x2F;demo-operator&#x2F;pkg&#x2F;client&#x2F;clientset</span><br><span class="line">Generating listers for dangdang.com:v1 at zlang-lst&#x2F;demo-operator&#x2F;pkg&#x2F;client&#x2F;listers</span><br><span class="line">Generating informers for dangdang.com:v1 at zlang-lst&#x2F;demo-operator&#x2F;pkg&#x2F;client&#x2F;informers</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/openshift-evangelists/crd-code-generation" target="_blank" rel="noopener">https://github.com/openshift-evangelists/crd-code-generation</a></p><p><a href="https://blog.openshift.com/kubernetes-deep-dive-code-generation-customresources/" target="_blank" rel="noopener">https://blog.openshift.com/kubernetes-deep-dive-code-generation-customresources/</a></p><p><a href="https://git.gmem.cc/alex/demo-k8s-codegen" target="_blank" rel="noopener">https://git.gmem.cc/alex/demo-k8s-codegen</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> code-generator </tag>
            
            <tag> client-go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS系统终端连接WLAN Portal问题说明</title>
      <link href="/2017/07/18/Portal/"/>
      <url>/2017/07/18/Portal/</url>
      
        <content type="html"><![CDATA[<h1 id="CWP"><a href="#CWP" class="headerlink" title="CWP"></a>CWP</h1><p>在WIFI的应用场景中，有个很典型的应用，叫做<strong>Captive Portal</strong>，也叫<strong>Captive Web Portal (CWP)</strong>。<a id="more"></a></p><p>大致流程：</p><ol><li>用户的终端设备附着热点，接入WIFI；</li><li>使用浏览器打开任意网页；</li><li>得到一个WLAN Portal页面，需要用户进行认证；</li><li>认证通过后，允许自由访问网络，否则无法上网。</li></ol><p>有个典型的应用，就是移动总部的CMCC。咱们的Portal的推送认证流程就是如此。</p><h1 id="CNA"><a href="#CNA" class="headerlink" title="CNA"></a>CNA</h1><p>IOS，还有Mac OS，都有个功能，当接入无线网络后，会自动检测网络是否通。如果不通，则会自动弹出一个“页面”，让用户去登录。</p><p>Apple把这种功能叫做Captive Network Assistant（CNA）。</p><p>其原理如下：</p><ol><li><p>发送一个HTTP/1.0的请求到Apple服务器（例如： <a href="http://www.apple.com/library/test/success.html" target="_blank" rel="noopener">http://www.apple.com/library/test/success.html</a>）来探测网络是否连通。</p></li><li><p>接收1请求的应答，如果响应结果跟终端预计的一致，那么认为网络是通的，就不会自动弹出页面，同时，状态栏的WIFI图标出现，流程结束；否则，进入3步。</p></li><li><p>如果响应结果跟终端预计的不一致，那么认为有CWP存在。</p></li><li><p>如果有CWP存在，IOS就会自动打开一个页面，在这个页面中再发送一个HTTP/1.1的请求到Apple服务器（例如： <a href="http://www.apple.com/library/test/success.html" target="_blank" rel="noopener">http://www.apple.com/library/test/success.html</a>）。</p></li><li><p>因为存在CWP，所以4中自动打开的页面就能看到Portal了。</p></li></ol><p>补充：</p><p>4中IOS自动打开的页面，根据我们目前了解的情况来看，并不能算是一个标准的浏览器页面，这个页面对于cookie、js以及css都不能较好甚至不能支持，所以有些现场，用户使用IOS终端接入WLAN Portal时自动弹出的页面会出现样式错乱，js脚本执行无效，不支持cookie认证等情况。</p><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ul><li><p>鉴于IOS系统CNA机制的这种情况，我们一般建议用户出现问题时， 在IOS系统的设置中关闭掉对应热点的自动登录。</p></li><li><p>还有一种考虑方案，就是对于IOS系统的CAN探测请求从网络设备处放行，也即CNA流程第一步请求就能发送到Apple服务器。这样后续的流程就不继续，IOS终端系统就不会弹出页面，也不会产生无法连接WIFI的情况。</p></li></ul><h1 id="防止IOS自动弹出portal页"><a href="#防止IOS自动弹出portal页" class="headerlink" title="防止IOS自动弹出portal页"></a>防止IOS自动弹出portal页</h1><p>为了防止IOS切换ssid时自动弹出portal页，请将IOS的嗅探地址 <a href="http://captive.apple.com/hotspot-detect.html" target="_blank" rel="noopener">http://captive.apple.com/hotspot-detect.html</a> 放入白名单。</p><blockquote><p>摘自《微信公众平台技术文档》中 “Wi-Fi硬件鉴权协议接口说明” 3.5小节 第3点说明内容。<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1444894086" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1444894086</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Portal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Portal </tag>
            
            <tag> CWP </tag>
            
            <tag> CNA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
